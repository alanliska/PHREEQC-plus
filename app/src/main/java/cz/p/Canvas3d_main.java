package cz.p;

// because of the compatibility reasons (with Android 7-)
// it was necessary to define the blocks changing the geometry twice - with the progress dialog for newer OS versions
// as well as without them for older versions
// if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
//} else {
//}

import static cz.p.Spannables.colorized_dftb;
import static cz.p.Spannables.colorized_numbers;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.ParcelFileDescriptor;
import android.preference.PreferenceManager;
import android.renderscript.RenderScript;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Map;
import java.util.Optional;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;

public class Canvas3d_main extends MainActivity {

    Canvas3d_CanvasView molCanvasView;
    Button perTable;
    Button exportXYZ;
    Button importXYZ;
    Button clear;
    Button zoom;
    Button unzoom;
    Button rotateX;
    Button unrotateX;
    Button rotateY;
    Button unrotateY;
    Button rotateZ;
    Button unrotateZ;
    Button translateX;
    Button untranslateX;
    Button translateY;
    Button untranslateY;
    Button translateZ;
    Button untranslateZ;
    Button colorTest;
    Button atomLabel;
    Button mode;
    Button preferences;
    private static final int READ_FILE = 121;
    private Uri documentUri1;
    private static final int CREATE_FILE = 122;
    private Uri documentUri2;
    Button toMOPAC;
    Button toDFTB;
    Button toXTB;
    Button exitButton;
    Button undoButton;
    Button deleteButton;
    Button replaceButton;
    Button unselectButton;
    Button distanceButton;
    Button angleButton;
    Button dihedralButton;
    Button reorderButton;
    Button zmat;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.canvas3d_main);
        molCanvasView = (Canvas3d_CanvasView) findViewById(R.id.molCanvasView);
        perTable = (Button) findViewById(R.id.perTable);
        perTable.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub //
                Intent intent = new Intent(Canvas3d_main.this, Canvas3d_PerTable.class);
                startActivity(intent);
            }
        });
        colorTest = (Button) findViewById(R.id.colorTest);
        colorTest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub //
                Intent intent = new Intent(Canvas3d_main.this, Canvas3d_ColorTest.class);
                startActivity(intent);
            }
        });
        preferences = (Button) findViewById(R.id.preferences);
        preferences.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub //
                Intent intent = new Intent(Canvas3d_main.this, Canvas3d_Preferences.class);
                startActivity(intent);
            }
        });
        exitButton = (Button) findViewById(R.id.exitButton);
        exitButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub //
                Intent intent = new Intent(Canvas3d_main.this, MainActivity.class);
                startActivity(intent);
            }
        });
        toMOPAC = (Button) findViewById(R.id.toMOPAC);
        toMOPAC.setOnClickListener(toMOPACClick);
        toDFTB = (Button) findViewById(R.id.toDFTB);
        toDFTB.setOnClickListener(toDFTBClick);
        toXTB = (Button) findViewById(R.id.toXTB);
        toXTB.setOnClickListener(toXTBClick);
        exportXYZ = (Button) findViewById(R.id.exportXYZ);
        exportXYZ.setOnClickListener(exportXYZClick);
        importXYZ = (Button) findViewById(R.id.importXYZ);
        importXYZ.setOnClickListener(importXYZClick);
        clear = (Button) findViewById(R.id.clear);
        clear.setOnClickListener(clearClick);
        zoom = (Button) findViewById(R.id.zoom);
        zoom.setOnClickListener(zoomClick);
        unzoom = (Button) findViewById(R.id.unzoom);
        unzoom.setOnClickListener(unzoomClick);
        rotateX = (Button) findViewById(R.id.rotateX);
        rotateX.setOnClickListener(rotateXClick);
        unrotateX = (Button) findViewById(R.id.unrotateX);
        unrotateX.setOnClickListener(unrotateXClick);
        rotateY = (Button) findViewById(R.id.rotateY);
        rotateY.setOnClickListener(rotateYClick);
        unrotateY = (Button) findViewById(R.id.unrotateY);
        unrotateY.setOnClickListener(unrotateYClick);
        rotateZ = (Button) findViewById(R.id.rotateZ);
        rotateZ.setOnClickListener(rotateZClick);
        unrotateZ = (Button) findViewById(R.id.unrotateZ);
        unrotateZ.setOnClickListener(unrotateZClick);
        translateX = (Button) findViewById(R.id.translateX);
        translateX.setOnClickListener(translateXClick);
        untranslateX = (Button) findViewById(R.id.untranslateX);
        untranslateX.setOnClickListener(untranslateXClick);
        translateY = (Button) findViewById(R.id.translateY);
        translateY.setOnClickListener(translateYClick);
        untranslateY = (Button) findViewById(R.id.untranslateY);
        untranslateY.setOnClickListener(untranslateYClick);
        translateZ = (Button) findViewById(R.id.translateZ);
        translateZ.setOnClickListener(translateZClick);
        untranslateZ = (Button) findViewById(R.id.untranslateZ);
        untranslateZ.setOnClickListener(untranslateZClick);
        atomLabel = (Button) findViewById(R.id.atomLabel);
        atomLabel.setOnClickListener(atomLabelClick);
        mode = (Button) findViewById(R.id.mode);
        mode.setOnClickListener(modeClick);
        undoButton = (Button) findViewById(R.id.undoButton);
        undoButton.setOnClickListener(undoButtonClick);
        deleteButton = (Button) findViewById(R.id.deleteButton);
        deleteButton.setOnClickListener(deleteButtonClick);
        replaceButton = (Button) findViewById(R.id.replaceButton);
        replaceButton.setOnClickListener(replaceButtonClick);
        unselectButton = (Button) findViewById(R.id.unselectButton);
        unselectButton.setOnClickListener(unselectButtonClick);
        distanceButton = (Button) findViewById(R.id.distanceButton);
        distanceButton.setOnClickListener(distanceButtonClick);
        angleButton = (Button) findViewById(R.id.angleButton);
        angleButton.setOnClickListener(angleButtonClick);
        dihedralButton = (Button) findViewById(R.id.dihedralButton);
        dihedralButton.setOnClickListener(dihedralButtonClick);
        reorderButton = (Button) findViewById(R.id.reorderButton);
        reorderButton.setOnClickListener(reorderButtonClick);
        zmat = (Button) findViewById(R.id.zmat);
        zmat.setOnClickListener(zmatClick);
        perTable.setText(exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp"));
        String ModeState = exec("cat "+getFilesDir()+"/canvas3d/Mode.tmp");
        if (Integer.valueOf(ModeState) > 0){
            mode.setText("Draw");
        } else if (Integer.valueOf(ModeState) == 0){
            mode.setText("Select");
        }
        String AtomLabelState = exec("cat "+getFilesDir()+"/canvas3d/AtomLabel.tmp");
        if (Integer.valueOf(AtomLabelState) == 1){
            atomLabel.setText("Labels on");
        } else if (Integer.valueOf(AtomLabelState) == 0){
            atomLabel.setText("Labels off");
        } else if (Integer.valueOf(AtomLabelState) == 2) {
            atomLabel.setText("Z-coords");
        }
        //////////////////////////////////////////////////////////////////////////////
        exec("chmod -R 755 "+getFilesDir()+"/");
    }

    public void onStart()
    {
        super.onStart();
        perTable.setText(exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp"));
// tady nemusí být nic - důležité je, že v onDraw je definováno vykreslování obsahu souboru Coordinates.x.tmp - ty se zobrazí na začátku, kdykoliv jindy i po zavření/otevření
    }

    private View.OnClickListener zmatClick; {

        zmatClick = new View.OnClickListener() {
            public void onClick(View v) {
                // TODO Auto-generated method stub //


                // create XYZ file
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Generating the Gaussian Z-matrix...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();
//
//                new Thread() {
//                    public void run() {
                // the progressdialog here starts the asynchronous task during which the final *.gjf file is not produced until the following alert is invoked - therefore it is commented (for now)
                try {
                    Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));

                    // get knowledge on number of already existing lines in the file
                    InputStream inputStream = new FileInputStream(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                    LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                    try {
                        lineNumberReader.skip(Long.MAX_VALUE);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
//                            int linesInFile = lineNumberReader.getLineNumber() + 1;  // because line numbers starts from 0
                    // but we add one more blank line
                    int linesInFile = lineNumberReader.getLineNumber();
                    String AtomNumber = String.valueOf(linesInFile);
                    FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp", MODE_PRIVATE);
                    OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                    outputWriter0.write(AtomNumber);
                    outputWriter0.write("\n");
                    outputWriter0.write("\n");
                    outputWriter0.close();

                    while (scan3.hasNext()) {
                        String curLine = scan3.nextLine();
                        String[] splitted = curLine.split("\\s");
                        String atom = splitted[0].trim();
                        String x_coord = splitted[1].trim();
                        String y_coord = splitted[2].trim();
                        String z_coord = splitted[3].trim();
                        String radius = splitted[4].trim();
                        String atom_color = splitted[5].trim();
                        String text_color = splitted[6].trim();
                        String atom_number = splitted[7].trim();
                        String col_at_border = splitted[8].trim();
                        String touch_time = splitted[9].trim();

                        double x_double = Double.valueOf(x_coord);
                        double y_double = Double.valueOf(y_coord);
                        double z_double = Double.valueOf(z_coord);
                        String x_formatted = String.format("%.4f", x_double);
                        String y_formatted = String.format("%.4f", y_double);
                        String z_formatted = String.format("%.4f", z_double);
                        while (x_formatted.contains(",")){
                            x_formatted = x_formatted.replace(",", ".");
                        }
                        while (y_formatted.contains(",")){
                            y_formatted = y_formatted.replace(",", ".");
                        }
                        while (z_formatted.contains(",")){
                            z_formatted = z_formatted.replace(",", ".");
                        }
                        // finish writing the file
                        FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp", MODE_APPEND);
                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                        outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                        outputWriter.close();
                    }
                    scan3.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp "+getFilesDir()+"/canvas3d/");
//                        onFinish();
//                    }
//                    public void onFinish() {
//                        progressDialog.dismiss();
//                    }
//                }.start();
                // convert XYZ to GJF ; edited - to maintain the compatibility also for Android 9 and Android 8 devices, it is not possible to use the sed /XYZ/Q command
                com.jrummyapps.android.shell.Shell.SH.run("export HOME=/data/data/cz.p/files ; cd $HOME/canvas3d ; export BABEL_DATADIR=$HOME/database/openbabel ; "+getApplicationInfo().nativeLibraryDir+"/libobabel.so -ixyz Coordinates.xyz.tmp -ogzmat > Coordinates.gjf.tmp ; sed -i 1,6d Coordinates.gjf.tmp ; sed /Variables/q Coordinates.gjf.tmp > Coordinates1.gjf.tmp ; sed -i '$d' Coordinates1.gjf.tmp ; sed 1,/^Variables/d Coordinates.gjf.tmp > Coordinates2.gjf.tmp ; cd .. ; touch Coordinates3.gjf.tmp");
                //com.jrummyapps.android.shell.Shell.SH.run("export HOME=/data/data/cz.p/files ; cd $HOME/canvas3d ; export BABEL_DATADIR=$HOME/database/openbabel ; "+getApplicationInfo().nativeLibraryDir+"/libobabel.so -ixyz Coordinates.xyz.tmp -ogzmat > Coordinates.gjf.tmp ; sed -i 1,6d Coordinates.gjf.tmp ; sed /Variables/Q Coordinates.gjf.tmp > Coordinates1.gjf.tmp ; sed 1,/^Variables/d Coordinates.gjf.tmp > Coordinates2.gjf.tmp ; cd .. ; touch Coordinates3.gjf.tmp");
                // replace the string variables by the corresponding values
                String Coordinates1 = exec("cat "+getFilesDir()+"/canvas3d/Coordinates1.gjf.tmp");
                String Coordinates2 = exec("cat "+getFilesDir()+"/canvas3d/Coordinates2.gjf.tmp");
                while (Coordinates2.contains("=")){  //2 spaces
                    Coordinates2 = Coordinates2.replace("=", " "); //(2 spaces, 1 space)
                }
                while (Coordinates2.contains("\t")){  //2 spaces
                    Coordinates2 = Coordinates2.replace("\t", " "); //(2 spaces, 1 space)
                }
                while (Coordinates2.contains("  ")){  //2 spaces
                    Coordinates2 = Coordinates2.replace("  ", " "); //(2 spaces, 1 space)
                }
                while (Coordinates2.contains("\n ")){  //2 spaces
                    Coordinates2 = Coordinates2.replace("\n ", "\n"); //(2 spaces, 1 space)
                }
//                Log.println(Log.INFO, "Coordinates1", "|"+Coordinates1+"|");
//                Log.println(Log.INFO, "Coordinates2", "|"+Coordinates2+"|");
                try {
                    Scanner scan = new Scanner(Coordinates2);
                    while (scan.hasNext()) {
                        String curLine = scan.nextLine();
                        String[] splitted = curLine.split("\\s");
                        String var = splitted[0].trim();
                        String value = splitted[1].trim();
//                        Log.println(Log.INFO, "var", "|"+var+"|");
//                        Log.println(Log.INFO, "value", "|"+value+"|");
//                        while (Coordinates1.contains("\\b"+var+"\\b")) {  //2 spaces
//                            Coordinates1 = Coordinates1.replace("\\b"+var+"\\b", value); //(2 spaces, 1 space)
//                        }
//                        while (Coordinates1.contains(var)) {  //2 spaces
//                            Coordinates1 = Coordinates1.replace(var, value); //(2 spaces, 1 space)
//                        }
                        // whole words (r2, r20, ...), not substrings (r2 in r20, ...)
                        Coordinates1 = Coordinates1.replaceAll("\\b"+var+"\\b", value);
                    }
                    scan.close();
//                    Log.println(Log.INFO, "Coordinates1after", "|"+Coordinates1+"|");
                    // write the file
                    FileOutputStream fileout = openFileOutput("Coordinates3.gjf.tmp", MODE_APPEND);
                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                    outputWriter.write(Coordinates1);
                    outputWriter.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                exec("mv "+getFilesDir()+"/Coordinates3.gjf.tmp "+getFilesDir()+"/canvas3d/Coordinates.gjf.tmp");
                exec("rm "+getFilesDir()+"/canvas3d/Coordinates1.gjf.tmp");
                exec("rm "+getFilesDir()+"/canvas3d/Coordinates2.gjf.tmp");
                // edit
                alertZmat();


            }
        };
    }

    public void alertZmat(){
        int maxLines = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/AlertDialogMaxLines.tmp"));
        // creating the EditText widget programatically
//        ScrollView scrollview = new ScrollView(Canvas3d_main.this);
        EditText editText100 = new EditText(Canvas3d_main.this);
        editText100.setTextSize(Integer.valueOf(exec("cat "+getFilesDir()+"/InputTextSize.txt")).intValue());
        editText100.setTypeface(Typeface.MONOSPACE);
        editText100.setText(colorized_numbers(exec("cat "+getFilesDir()+"/canvas3d/Coordinates.gjf.tmp")), EditText.BufferType.SPANNABLE);
//        editText100.setSingleLine(true);
        editText100.setMaxLines(maxLines);
        editText100.addTextChangedListener(new TextWatcher() {
            int startChanged,beforeChanged,countChanged;
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }
            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                startChanged = start;
                beforeChanged = before;
                countChanged = count;
            }
            @Override
            public void afterTextChanged(Editable s) {
                editText100.removeTextChangedListener(this);
                String text = editText100.getText().toString();
                // important - not setText() - otherwise the keyboard would be reset after each type
                editText100.getText().clear();
                editText100.append(colorized_numbers(text));
                // place the cursor at the original position
                editText100.setSelection(startChanged+countChanged);
                editText100.addTextChangedListener(this);
            }
        });
        // create the AlertDialog as final
        final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                .setMessage("Edit the internal coordinates")
                .setTitle("Gaussian Z-matrix")
//                .setView(scrollview)
                .setView(editText100)
                // Set the action buttons
                .setPositiveButton("Update", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int id) {
                        String GaussianZMatrix = editText100.getText().toString();
                        try {
                            FileOutputStream fileout = openFileOutput("Coordinates_.gjf.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                            outputWriter.write(GaussianZMatrix);
                            outputWriter.close();
                            FileOutputStream fileout2 = openFileOutput("Coordinates.gjf.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter2 = new OutputStreamWriter(fileout2);
                            outputWriter2.write("# method\n");
                            outputWriter2.write("\n");
                            outputWriter2.write("description\n");
                            outputWriter2.write("\n");
                            outputWriter2.write("0 1\n");
                            outputWriter2.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        exec("mv "+getFilesDir()+"/Coordinates_.gjf.tmp "+getFilesDir()+"/canvas3d/");
                        exec("mv "+getFilesDir()+"/Coordinates.gjf.tmp "+getFilesDir()+"/canvas3d/");






                        // convert back to XYZ
                        com.jrummyapps.android.shell.Shell.SH.run("export HOME=/data/data/cz.p/files ; cd $HOME/canvas3d ; export BABEL_DATADIR=$HOME/database/openbabel ; cat Coordinates_.gjf.tmp >> Coordinates.gjf.tmp ; rm Coordinates_.gjf.tmp ; "+getApplicationInfo().nativeLibraryDir+"/libobabel.so -igzmat Coordinates.gjf.tmp -oxyz > Coordinates.xyz.tmp");

                        int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));

                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                            ProgressDialog progressDialog2 = new ProgressDialog(Canvas3d_main.this);
                            progressDialog2.setTitle("Please wait...");
                            progressDialog2.setMessage("Regenerating the cartesian files...");
                            progressDialog2.setCancelable(false);
                            progressDialog2.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                }
                            });
                            progressDialog2.show();

                            new Thread() {
                                public void run() {
                                    String XYZfile = exec("cat "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
                                    try {
                                        while (XYZfile.contains("\t")){  //2 spaces
                                            XYZfile = XYZfile.replace("\t", " "); //(2 spaces, 1 space)
                                        }
                                        while (XYZfile.contains("  ")){  //2 spaces
                                            XYZfile = XYZfile.replace("  ", " "); //(2 spaces, 1 space)
                                        }
                                        while (XYZfile.contains("\n ")){  //2 spaces
                                            XYZfile = XYZfile.replace("\n ", "\n"); //(2 spaces, 1 space)
                                        }

                                        FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp", MODE_PRIVATE);
                                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                        outputWriter.write(XYZfile);
                                        outputWriter.close();


                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                        exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                                        exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

                                        // in Angstroms, in 0;0, without zoom
                                        exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                        exec("sed -i 1,2d "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                            double radius = 0;
                                            int atom_color = 0;
                                            int text_color = 0;
                                            int atom_number = 0;
                                            int atomNumber = 0;
                                            // now in Angstroms
                                            double radius_Ang = 0;

                                            while (scan.hasNext()) {
                                                atomNumber++;

                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split(" ");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();

                                                atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                                try {
                                                    Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                                    while (scanElmnt.hasNext()) {
                                                        String curLineElmnt = scanElmnt.nextLine();
                                                        String[] splittedElmnt = curLineElmnt.split(" ");
                                                        String elementElmnt = splittedElmnt[0].trim();
                                                        String radiusElmnt = splittedElmnt[1].trim();
                                                        String atom_colorElmnt = splittedElmnt[2].trim();
                                                        String text_colorElmnt = splittedElmnt[3].trim();

                                                        radius = Double.valueOf(radiusElmnt);
                                                        atom_color = Integer.valueOf(atom_colorElmnt);
                                                        text_color = Integer.valueOf(text_colorElmnt);
                                                        radius_Ang = radius/100;

                                                        if (atom.equals(elementElmnt)) {

                                                            // write in Angstroms, in 0;0, without zoom
                                                            FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                            outputWriter3.write(elementElmnt +"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                            outputWriter3.close();
                                                        }
                                                    }
                                                    scanElmnt.close();
                                                } catch (FileNotFoundException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            // až tady: (za smyčkou)
                                            scan.close();
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                            double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                            double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                            double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                            try {
                                                Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                int lineNo1 = 0;
                                                while (scanX.hasNext()) {
                                                    lineNo1++;
                                                    String curLineX = scanX.nextLine();
                                                    String[] splittedX = curLineX.split("\\s");
                                                    String atomX = splittedX[0].trim();
                                                    String x_coordX = splittedX[1].trim();
                                                    String y_coordX = splittedX[2].trim();
                                                    String z_coordX = splittedX[3].trim();
                                                    String radiusX = splittedX[4].trim();
                                                    String atom_colorX = splittedX[5].trim();
                                                    String text_colorX = splittedX[6].trim();
                                                    String atom_numberX = splittedX[7].trim();
                                                    String col_at_borderX = splittedX[8].trim();
                                                    String touch_timeX = splittedX[9].trim();
                                                    int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                                    // project 3D geometry to z = 0
                                                    double A = 0;
                                                    double B = 0;
                                                    double C = 1;
                                                    double D = 0;
                                                    double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    // because of canvas - input variables x&y have to be integers, not doubles
                                                    int x_projection = (int) (x_projX*100);
                                                    int y_projection = (int) (y_projX*100);
                                                    int z_projection = (int) (z_projX*100);
                                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                                    double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                                    // write the file
                                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                    outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                                    outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                                    outputWriter_atoms.close();

                                                    // second loop - to reveal the bonds
                                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                    int lineNo2 = 0;
                                                    while (scan2.hasNext()) {
                                                        lineNo2++;
                                                        String curLine2 = scan2.nextLine();
                                                        String[] splitted2 = curLine2.split("\\s");
                                                        String atom2 = splitted2[0].trim();
                                                        String x_coord2 = splitted2[1].trim();
                                                        String y_coord2 = splitted2[2].trim();
                                                        String z_coord2 = splitted2[3].trim();
                                                        String radius2 = splitted2[4].trim();
                                                        String atom_color2 = splitted2[5].trim();
                                                        String text_color2 = splitted2[6].trim();
                                                        String atom_number2 = splitted2[7].trim();
                                                        String col_at_border2 = splitted2[8].trim();
                                                        String touch_time2 = splitted2[9].trim();

                                                        if (lineNo2 >= lineNo1) {
                                                            // investigate all distances
                                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                            double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                                double A2 = 0;
                                                                double B2 = 0;
                                                                double C2 = 1;
                                                                double D2 = 0;
                                                                double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                double x_bond1 = 100 * x_proj1;
                                                                double y_bond1 = 100 * y_proj1;
                                                                double x_bond2 = 100 * x_proj2;
                                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                                int bond_color1 = Integer.valueOf(atom_colorX);
                                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                // write the file
                                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                                outputWriter_bonds.close();
                                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                                if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scan2.close();
                                                }
                                                scanX.close();
                                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                            try {
                                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                                outputWriter_sort.write(Z_sort);
                                                outputWriter_sort.close();
                                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                            } catch (FileNotFoundException e) {
                                                e.printStackTrace();
                                            } catch (IOException e) {
                                                e.printStackTrace();
                                            }
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Toast.makeText(getApplicationContext(), "File not read", Toast.LENGTH_SHORT).show();
                                    }
                                    //display the results
                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                                    onFinish();
                                }
                                public void onFinish() {
                                    progressDialog2.dismiss();
                                }

                            }.start();
                        } else {
//                            ProgressDialog progressDialog2 = new ProgressDialog(Canvas3d_main.this);
//                            progressDialog2.setTitle("Please wait...");
//                            progressDialog2.setMessage("Regenerating the cartesian files...");
//                            progressDialog2.setCancelable(false);
//                            progressDialog2.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                @Override
//                                public void onClick(DialogInterface dialog, int which) {
//                                    dialog.dismiss();
//                                }
//                            });
//                            progressDialog2.show();
//
//                            new Thread() {
//                                public void run() {
                                    String XYZfile = exec("cat "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
                                    try {
                                        while (XYZfile.contains("\t")){  //2 spaces
                                            XYZfile = XYZfile.replace("\t", " "); //(2 spaces, 1 space)
                                        }
                                        while (XYZfile.contains("  ")){  //2 spaces
                                            XYZfile = XYZfile.replace("  ", " "); //(2 spaces, 1 space)
                                        }
                                        while (XYZfile.contains("\n ")){  //2 spaces
                                            XYZfile = XYZfile.replace("\n ", "\n"); //(2 spaces, 1 space)
                                        }

                                        FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp", MODE_PRIVATE);
                                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                        outputWriter.write(XYZfile);
                                        outputWriter.close();


                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                        exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                                        exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

                                        // in Angstroms, in 0;0, without zoom
                                        exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                        exec("sed -i 1,2d "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                            double radius = 0;
                                            int atom_color = 0;
                                            int text_color = 0;
                                            int atom_number = 0;
                                            int atomNumber = 0;
                                            // now in Angstroms
                                            double radius_Ang = 0;

                                            while (scan.hasNext()) {
                                                atomNumber++;

                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split(" ");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();

                                                atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                                try {
                                                    Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                                    while (scanElmnt.hasNext()) {
                                                        String curLineElmnt = scanElmnt.nextLine();
                                                        String[] splittedElmnt = curLineElmnt.split(" ");
                                                        String elementElmnt = splittedElmnt[0].trim();
                                                        String radiusElmnt = splittedElmnt[1].trim();
                                                        String atom_colorElmnt = splittedElmnt[2].trim();
                                                        String text_colorElmnt = splittedElmnt[3].trim();

                                                        radius = Double.valueOf(radiusElmnt);
                                                        atom_color = Integer.valueOf(atom_colorElmnt);
                                                        text_color = Integer.valueOf(text_colorElmnt);
                                                        radius_Ang = radius/100;

                                                        if (atom.equals(elementElmnt)) {

                                                            // write in Angstroms, in 0;0, without zoom
                                                            FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                            outputWriter3.write(elementElmnt +"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                            outputWriter3.close();
                                                        }
                                                    }
                                                    scanElmnt.close();
                                                } catch (FileNotFoundException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            // až tady: (za smyčkou)
                                            scan.close();
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
//                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                            double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                            double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                            double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                            try {
                                                Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                int lineNo1 = 0;
                                                while (scanX.hasNext()) {
                                                    lineNo1++;
                                                    String curLineX = scanX.nextLine();
                                                    String[] splittedX = curLineX.split("\\s");
                                                    String atomX = splittedX[0].trim();
                                                    String x_coordX = splittedX[1].trim();
                                                    String y_coordX = splittedX[2].trim();
                                                    String z_coordX = splittedX[3].trim();
                                                    String radiusX = splittedX[4].trim();
                                                    String atom_colorX = splittedX[5].trim();
                                                    String text_colorX = splittedX[6].trim();
                                                    String atom_numberX = splittedX[7].trim();
                                                    String col_at_borderX = splittedX[8].trim();
                                                    String touch_timeX = splittedX[9].trim();
                                                    int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                                    // project 3D geometry to z = 0
                                                    double A = 0;
                                                    double B = 0;
                                                    double C = 1;
                                                    double D = 0;
                                                    double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    // because of canvas - input variables x&y have to be integers, not doubles
                                                    int x_projection = (int) (x_projX*100);
                                                    int y_projection = (int) (y_projX*100);
                                                    int z_projection = (int) (z_projX*100);
                                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                                    double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                                    // write the file
                                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                    outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                                    outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                                    outputWriter_atoms.close();

                                                    // second loop - to reveal the bonds
                                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                    int lineNo2 = 0;
                                                    while (scan2.hasNext()) {
                                                        lineNo2++;
                                                        String curLine2 = scan2.nextLine();
                                                        String[] splitted2 = curLine2.split("\\s");
                                                        String atom2 = splitted2[0].trim();
                                                        String x_coord2 = splitted2[1].trim();
                                                        String y_coord2 = splitted2[2].trim();
                                                        String z_coord2 = splitted2[3].trim();
                                                        String radius2 = splitted2[4].trim();
                                                        String atom_color2 = splitted2[5].trim();
                                                        String text_color2 = splitted2[6].trim();
                                                        String atom_number2 = splitted2[7].trim();
                                                        String col_at_border2 = splitted2[8].trim();
                                                        String touch_time2 = splitted2[9].trim();

                                                        if (lineNo2 >= lineNo1) {
                                                            // investigate all distances
                                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                            double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                                double A2 = 0;
                                                                double B2 = 0;
                                                                double C2 = 1;
                                                                double D2 = 0;
                                                                double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                double x_bond1 = 100 * x_proj1;
                                                                double y_bond1 = 100 * y_proj1;
                                                                double x_bond2 = 100 * x_proj2;
                                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                                int bond_color1 = Integer.valueOf(atom_colorX);
                                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                // write the file
                                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                                outputWriter_bonds.close();
                                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                                if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scan2.close();
                                                }
                                                scanX.close();
                                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                            try {
                                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                                outputWriter_sort.write(Z_sort);
                                                outputWriter_sort.close();
                                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                            } catch (FileNotFoundException e) {
                                                e.printStackTrace();
                                            } catch (IOException e) {
                                                e.printStackTrace();
                                            }
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Toast.makeText(getApplicationContext(), "File not read", Toast.LENGTH_SHORT).show();
                                    }
                                    //display the results
                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                    onFinish();
//                                }
//                                public void onFinish() {
//                                    progressDialog2.dismiss();
//                                }
//
//                            }.start();
                        }










                    }
                })

                .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int id) {
                        // removes the AlertDialog in the screen
                    }
                })
                .create();


        // set the focus change listener of the EditText10
        // this part will make the soft keyboard automatically visible
        editText100.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (hasFocus) {
                    dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
                }
            }
        });

        // to show the buttons when the text is long
//        scrollview.addView(editText100);
        dialog.show();

    }

    private View.OnClickListener toXTBClick; {
        toXTBClick = new View.OnClickListener() {
            public void onClick(View v) {

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Generating the XYZ file...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));

                                // get knowledge on number of already existing lines in the file
                                InputStream inputStream = new FileInputStream(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                                LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                                try {
                                    lineNumberReader.skip(Long.MAX_VALUE);
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//                            int linesInFile = lineNumberReader.getLineNumber() + 1;  // because line numbers starts from 0
                                // but we add one more blank line
                                int linesInFile = lineNumberReader.getLineNumber();
                                String AtomNumber = String.valueOf(linesInFile);
                                FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                                outputWriter0.write(AtomNumber);
                                outputWriter0.write("\n");
                                outputWriter0.write("\n");
                                outputWriter0.close();

                                while (scan3.hasNext()) {
                                    String curLine = scan3.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_double = Double.valueOf(x_coord);
                                    double y_double = Double.valueOf(y_coord);
                                    double z_double = Double.valueOf(z_coord);
                                    String x_formatted = String.format("%.4f", x_double);
                                    String y_formatted = String.format("%.4f", y_double);
                                    String z_formatted = String.format("%.4f", z_double);
                                    while (x_formatted.contains(",")){
                                        x_formatted = x_formatted.replace(",", ".");
                                    }
                                    while (y_formatted.contains(",")){
                                        y_formatted = y_formatted.replace(",", ".");
                                    }
                                    while (z_formatted.contains(",")){
                                        z_formatted = z_formatted.replace(",", ".");
                                    }
                                    // finish writing the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                    outputWriter.close();
                                }
                                scan3.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp_ "+getFilesDir()+"/xtb/Input-xtb.xyz");
                            Intent intent = new Intent(Canvas3d_main.this, Xtb.class);
                            startActivity(intent);
                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Generating the XYZ file...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));

                                // get knowledge on number of already existing lines in the file
                                InputStream inputStream = new FileInputStream(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                                LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                                try {
                                    lineNumberReader.skip(Long.MAX_VALUE);
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//                            int linesInFile = lineNumberReader.getLineNumber() + 1;  // because line numbers starts from 0
                                // but we add one more blank line
                                int linesInFile = lineNumberReader.getLineNumber();
                                String AtomNumber = String.valueOf(linesInFile);
                                FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                                outputWriter0.write(AtomNumber);
                                outputWriter0.write("\n");
                                outputWriter0.write("\n");
                                outputWriter0.close();

                                while (scan3.hasNext()) {
                                    String curLine = scan3.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_double = Double.valueOf(x_coord);
                                    double y_double = Double.valueOf(y_coord);
                                    double z_double = Double.valueOf(z_coord);
                                    String x_formatted = String.format("%.4f", x_double);
                                    String y_formatted = String.format("%.4f", y_double);
                                    String z_formatted = String.format("%.4f", z_double);
                                    while (x_formatted.contains(",")){
                                        x_formatted = x_formatted.replace(",", ".");
                                    }
                                    while (y_formatted.contains(",")){
                                        y_formatted = y_formatted.replace(",", ".");
                                    }
                                    while (z_formatted.contains(",")){
                                        z_formatted = z_formatted.replace(",", ".");
                                    }
                                    // finish writing the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                    outputWriter.close();
                                }
                                scan3.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp_ "+getFilesDir()+"/xtb/Input-xtb.xyz");
                            Intent intent = new Intent(Canvas3d_main.this, Xtb.class);
                            startActivity(intent);
                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener toDFTBClick; {
        toDFTBClick = new View.OnClickListener() {
            public void onClick(View v) {

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Generating the XYZ file...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {
                            try {
                                Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));

                                // get knowledge on number of already existing lines in the file
                                InputStream inputStream = new FileInputStream(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                                LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                                try {
                                    lineNumberReader.skip(Long.MAX_VALUE);
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//                            int linesInFile = lineNumberReader.getLineNumber() + 1;  // because line numbers starts from 0
                                // but we add one more blank line
                                int linesInFile = lineNumberReader.getLineNumber();
                                String AtomNumber = String.valueOf(linesInFile);
                                FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                                outputWriter0.write(AtomNumber);
                                outputWriter0.write("\n");
                                outputWriter0.write("\n");
                                outputWriter0.close();

                                while (scan3.hasNext()) {
                                    String curLine = scan3.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_double = Double.valueOf(x_coord);
                                    double y_double = Double.valueOf(y_coord);
                                    double z_double = Double.valueOf(z_coord);
                                    String x_formatted = String.format("%.4f", x_double);
                                    String y_formatted = String.format("%.4f", y_double);
                                    String z_formatted = String.format("%.4f", z_double);
                                    while (x_formatted.contains(",")){
                                        x_formatted = x_formatted.replace(",", ".");
                                    }
                                    while (y_formatted.contains(",")){
                                        y_formatted = y_formatted.replace(",", ".");
                                    }
                                    while (z_formatted.contains(",")){
                                        z_formatted = z_formatted.replace(",", ".");
                                    }
                                    // finish writing the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                    outputWriter.close();
                                }
                                scan3.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp_ "+getFilesDir()+"/dftb/Input.xyz");
                            Intent intent = new Intent(Canvas3d_main.this, Dftb.class);
                            startActivity(intent);
                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Generating the XYZ file...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {
                            try {
                                Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));

                                // get knowledge on number of already existing lines in the file
                                InputStream inputStream = new FileInputStream(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                                LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                                try {
                                    lineNumberReader.skip(Long.MAX_VALUE);
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//                            int linesInFile = lineNumberReader.getLineNumber() + 1;  // because line numbers starts from 0
                                // but we add one more blank line
                                int linesInFile = lineNumberReader.getLineNumber();
                                String AtomNumber = String.valueOf(linesInFile);
                                FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                                outputWriter0.write(AtomNumber);
                                outputWriter0.write("\n");
                                outputWriter0.write("\n");
                                outputWriter0.close();

                                while (scan3.hasNext()) {
                                    String curLine = scan3.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_double = Double.valueOf(x_coord);
                                    double y_double = Double.valueOf(y_coord);
                                    double z_double = Double.valueOf(z_coord);
                                    String x_formatted = String.format("%.4f", x_double);
                                    String y_formatted = String.format("%.4f", y_double);
                                    String z_formatted = String.format("%.4f", z_double);
                                    while (x_formatted.contains(",")){
                                        x_formatted = x_formatted.replace(",", ".");
                                    }
                                    while (y_formatted.contains(",")){
                                        y_formatted = y_formatted.replace(",", ".");
                                    }
                                    while (z_formatted.contains(",")){
                                        z_formatted = z_formatted.replace(",", ".");
                                    }
                                    // finish writing the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                    outputWriter.close();
                                }
                                scan3.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp_ "+getFilesDir()+"/dftb/Input.xyz");
                            Intent intent = new Intent(Canvas3d_main.this, Dftb.class);
                            startActivity(intent);
                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener toMOPACClick; {
        toMOPACClick = new View.OnClickListener() {
            public void onClick(View v) {

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Generating the XYZ file...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {
                            try {
                                Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                while (scan3.hasNext()) {
                                    String curLine = scan3.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_double = Double.valueOf(x_coord);
                                    double y_double = Double.valueOf(y_coord);
                                    double z_double = Double.valueOf(z_coord);
                                    String x_formatted = String.format("%.4f", x_double);
                                    String y_formatted = String.format("%.4f", y_double);
                                    String z_formatted = String.format("%.4f", z_double);
                                    while (x_formatted.contains(",")){
                                        x_formatted = x_formatted.replace(",", ".");
                                    }
                                    while (y_formatted.contains(",")){
                                        y_formatted = y_formatted.replace(",", ".");
                                    }
                                    while (z_formatted.contains(",")){
                                        z_formatted = z_formatted.replace(",", ".");
                                    }
                                    // finish writing the file
                                    FileOutputStream fileout = openFileOutput("Input-mopac.txt", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                    outputWriter.close();
                                }
                                scan3.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            Intent intent = new Intent(Canvas3d_main.this, Mopac.class);
                            startActivity(intent);
                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Generating the XYZ file...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {
                            try {
                                Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                while (scan3.hasNext()) {
                                    String curLine = scan3.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_double = Double.valueOf(x_coord);
                                    double y_double = Double.valueOf(y_coord);
                                    double z_double = Double.valueOf(z_coord);
                                    String x_formatted = String.format("%.4f", x_double);
                                    String y_formatted = String.format("%.4f", y_double);
                                    String z_formatted = String.format("%.4f", z_double);
                                    while (x_formatted.contains(",")){
                                        x_formatted = x_formatted.replace(",", ".");
                                    }
                                    while (y_formatted.contains(",")){
                                        y_formatted = y_formatted.replace(",", ".");
                                    }
                                    while (z_formatted.contains(",")){
                                        z_formatted = z_formatted.replace(",", ".");
                                    }
                                    // finish writing the file
                                    FileOutputStream fileout = openFileOutput("Input-mopac.txt", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                    outputWriter.close();
                                }
                                scan3.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            Intent intent = new Intent(Canvas3d_main.this, Mopac.class);
                            startActivity(intent);
                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener unselectButtonClick; {
        unselectButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                exec("touch "+getFilesDir()+"/Coordinates.tmp");

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Cancelling the atom selection...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();


                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    if (typeC.equals("C")) {
                                        if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                            outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                        } else {
                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                        }
                                    } else {
                                        outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                    }
                                    outputWriter_atoms.close();
                                }
                                scanC.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");


                                // reset also the file No. 2
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                while (scan.hasNext()) {
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                    outputWriter.close();

                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Cancelling the atom selection...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();


                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    if (typeC.equals("C")) {
                                        if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                            outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                        } else {
                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                        }
                                    } else {
                                        outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                    }
                                    outputWriter_atoms.close();
                                }
                                scanC.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");


                                // reset also the file No. 2
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                while (scan.hasNext()) {
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                    outputWriter.close();

                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener distanceButtonClick; {
        distanceButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                exec("touch "+getFilesDir()+"/Coordinates.tmp");

                String Replacement = exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp");

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Measuring the distance...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();

//                new Thread() {
//                    public void run() {

                    try {
                        exec("cp "+getFilesDir()+"/canvas3d/Coordinates.tmp "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                        try {
                            String Z_sort = exec("sort -g -rk5 "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_measure.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv "+getFilesDir()+"/Coordinates_measure.tmp "+getFilesDir()+"/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                        double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                        double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                        double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));

                        int atomCount = 0;
                        double x1 = 0;
                        double x2 = 0;
                        double y1 = 0;
                        double y2 = 0;
                        double z1 = 0;
                        double z2 = 0;

                        try {
                            Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_measure.tmp"));
                            while (scanC.hasNext()) {
                                String curLineC = scanC.nextLine();
                                String[] splittedC = curLineC.split("\\s");
                                String atom1C = splittedC[0].trim();
                                String atom2C = splittedC[1].trim();
                                String x1_projC = splittedC[2].trim();
                                String y1_projC = splittedC[3].trim();
                                String x2_projC = splittedC[4].trim();
                                String y2_projC = splittedC[5].trim();
                                String z_coordC = splittedC[6].trim();
                                String radiusC = splittedC[7].trim();
                                String atom_colorC = splittedC[8].trim();
                                String atom_numberC = splittedC[9].trim();
                                String typeC = splittedC[10].trim();

                                if (typeC.equals("C")) {
                                    try {
                                        Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                        while (scan.hasNext()) {
                                            String curLine = scan.nextLine();
                                            String[] splitted = curLine.split("\\s");
                                            String atom = splitted[0].trim();
                                            String x_coord = splitted[1].trim();
                                            String y_coord = splitted[2].trim();
                                            String z_coord = splitted[3].trim();
                                            String radius = splitted[4].trim();
                                            String atom_color = splitted[5].trim();
                                            String text_color = splitted[6].trim();
                                            String atom_number = splitted[7].trim();
                                            String col_at_border = splitted[8].trim();
                                            String touch_time = splitted[9].trim();

                                            int radius_pix = (int) (Double.valueOf(radius) * 100);

                                            // project 3D geometry to z = 0
                                            double A = 0;
                                            double B = 0;
                                            double C = 1;
                                            double D = 0;
                                            double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            // because of canvas - input variables x&y have to be integers, not doubles
                                            int x_projection = (int) (x_proj * 100);
                                            int y_projection = (int) (y_proj * 100);
                                            int z_projection = (int) (z_proj * 100);

                                            if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                atomCount++;
                                                if (atomCount == 1){
                                                    x1 = x_proj;
                                                    y1 = y_proj;
                                                    z1 = z_proj;
                                                } else if (atomCount == 2) {
                                                    x2 = x_proj;
                                                    y2 = y_proj;
                                                    z2 = z_proj;
                                                } else if (atomCount > 2) {
                                                }
                                            }
                                        }
                                        scan.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                            scanC.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                        if (atomCount != 2) {
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("Error: select 2 atoms.")
                                    .setTitle("Distance measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
//                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
//                                        int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
//                                        exec("touch "+getFilesDir()+"/Coordinates.tmp");
//
//                                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                        progressDialog.setTitle("Please wait...");
//                                        progressDialog.setMessage("Cancelling the atom selection...");
//                                        progressDialog.setCancelable(false);
//                                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                            @Override
//                                            public void onClick(DialogInterface dialog, int which) {
//                                                dialog.dismiss();
//                                            }
//                                        });
//                                        progressDialog.show();
//
//                                        new Thread() {
//                                            public void run() {
//
//                                                try {
//                                                    Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
//                                                    while (scanC.hasNext()) {
//                                                        String curLineC = scanC.nextLine();
//                                                        String[] splittedC = curLineC.split("\\s");
//                                                        String atom1C = splittedC[0].trim();
//                                                        String atom2C = splittedC[1].trim();
//                                                        String x1_projC = splittedC[2].trim();
//                                                        String y1_projC = splittedC[3].trim();
//                                                        String x2_projC = splittedC[4].trim();
//                                                        String y2_projC = splittedC[5].trim();
//                                                        String z_coordC = splittedC[6].trim();
//                                                        String radiusC = splittedC[7].trim();
//                                                        String atom_colorC = splittedC[8].trim();
//                                                        String atom_numberC = splittedC[9].trim();
//                                                        String typeC = splittedC[10].trim();
//
//
//                                                        // write the file
//                                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                        if (typeC.equals("C")) {
//                                                            if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            } else {
//                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            }
//                                                        } else {
//                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                        }
//                                                        outputWriter_atoms.close();
//                                                    }
//                                                    scanC.close();
//                                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
//                                                } catch (Exception e) {
//                                                    e.printStackTrace();
//                                                }
//
//                                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                onFinish();
//                                            }
//                                            public void onFinish() {
//                                                progressDialog.dismiss();
//                                            }
//                                        }.start();
                                        }
                                    })
                                    .create();
                            dialog.show();
                        } else if (atomCount == 2) {
                            double distanceAng = Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2)+Math.pow((z1-z2),2));
                            String distanceAng_formatted = String.format("%.4f", distanceAng);
                            while (distanceAng_formatted.contains(",")){
                                distanceAng_formatted = distanceAng_formatted.replace(",", ".");
                            }
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("distance = "+distanceAng_formatted+" Ang")
                                    .setTitle("Distance measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                                            exec("touch "+getFilesDir()+"/Coordinates.tmp");

                                            ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                                            progressDialog.setTitle("Please wait...");
                                            progressDialog.setMessage("Cancelling the atom selection...");
                                            progressDialog.setCancelable(false);
                                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    dialog.dismiss();
                                                }
                                            });
                                            progressDialog.show();

                                            new Thread() {
                                                public void run() {

                                                    try {
                                                        Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                                        while (scanC.hasNext()) {
                                                            String curLineC = scanC.nextLine();
                                                            String[] splittedC = curLineC.split("\\s");
                                                            String atom1C = splittedC[0].trim();
                                                            String atom2C = splittedC[1].trim();
                                                            String x1_projC = splittedC[2].trim();
                                                            String y1_projC = splittedC[3].trim();
                                                            String x2_projC = splittedC[4].trim();
                                                            String y2_projC = splittedC[5].trim();
                                                            String z_coordC = splittedC[6].trim();
                                                            String radiusC = splittedC[7].trim();
                                                            String atom_colorC = splittedC[8].trim();
                                                            String atom_numberC = splittedC[9].trim();
                                                            String typeC = splittedC[10].trim();


                                                            // write the file
                                                            FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                            if (typeC.equals("C")) {
                                                                if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                                                    outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                } else {
                                                                    outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                }
                                                            } else {
                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                            }
                                                            outputWriter_atoms.close();
                                                        }
                                                        scanC.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");


                                                        // reset also the file No. 2
                                                        Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                        while (scan.hasNext()) {
                                                            String curLine = scan.nextLine();
                                                            String[] splitted = curLine.split("\\s");
                                                            String atom = splitted[0].trim();
                                                            String x_coord = splitted[1].trim();
                                                            String y_coord = splitted[2].trim();
                                                            String z_coord = splitted[3].trim();
                                                            String radius = splitted[4].trim();
                                                            String atom_color = splitted[5].trim();
                                                            String text_color = splitted[6].trim();
                                                            String atom_number = splitted[7].trim();
                                                            String col_at_border = splitted[8].trim();
                                                            String touch_time = splitted[9].trim();

                                                            // write the file
                                                            FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                            outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                                            outputWriter.close();

                                                        }
                                                        scan.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }

                                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                                                    onFinish();
                                                }
                                                public void onFinish() {
                                                    progressDialog.dismiss();
                                                }
                                            }.start();

                                        }
                                    })
                                    .create();
                            dialog.show();
                        }





                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                    }
//                }.start();
                } else {
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Measuring the distance...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();

//                new Thread() {
//                    public void run() {

                    try {
                        exec("cp "+getFilesDir()+"/canvas3d/Coordinates.tmp "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                        try {
                            String Z_sort = exec("sort -g -rk5 "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_measure.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv "+getFilesDir()+"/Coordinates_measure.tmp "+getFilesDir()+"/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                        double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                        double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                        double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));

                        int atomCount = 0;
                        double x1 = 0;
                        double x2 = 0;
                        double y1 = 0;
                        double y2 = 0;
                        double z1 = 0;
                        double z2 = 0;

                        try {
                            Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_measure.tmp"));
                            while (scanC.hasNext()) {
                                String curLineC = scanC.nextLine();
                                String[] splittedC = curLineC.split("\\s");
                                String atom1C = splittedC[0].trim();
                                String atom2C = splittedC[1].trim();
                                String x1_projC = splittedC[2].trim();
                                String y1_projC = splittedC[3].trim();
                                String x2_projC = splittedC[4].trim();
                                String y2_projC = splittedC[5].trim();
                                String z_coordC = splittedC[6].trim();
                                String radiusC = splittedC[7].trim();
                                String atom_colorC = splittedC[8].trim();
                                String atom_numberC = splittedC[9].trim();
                                String typeC = splittedC[10].trim();

                                if (typeC.equals("C")) {
                                    try {
                                        Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                        while (scan.hasNext()) {
                                            String curLine = scan.nextLine();
                                            String[] splitted = curLine.split("\\s");
                                            String atom = splitted[0].trim();
                                            String x_coord = splitted[1].trim();
                                            String y_coord = splitted[2].trim();
                                            String z_coord = splitted[3].trim();
                                            String radius = splitted[4].trim();
                                            String atom_color = splitted[5].trim();
                                            String text_color = splitted[6].trim();
                                            String atom_number = splitted[7].trim();
                                            String col_at_border = splitted[8].trim();
                                            String touch_time = splitted[9].trim();

                                            int radius_pix = (int) (Double.valueOf(radius) * 100);

                                            // project 3D geometry to z = 0
                                            double A = 0;
                                            double B = 0;
                                            double C = 1;
                                            double D = 0;
                                            double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            // because of canvas - input variables x&y have to be integers, not doubles
                                            int x_projection = (int) (x_proj * 100);
                                            int y_projection = (int) (y_proj * 100);
                                            int z_projection = (int) (z_proj * 100);

                                            if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                atomCount++;
                                                if (atomCount == 1){
                                                    x1 = x_proj;
                                                    y1 = y_proj;
                                                    z1 = z_proj;
                                                } else if (atomCount == 2) {
                                                    x2 = x_proj;
                                                    y2 = y_proj;
                                                    z2 = z_proj;
                                                } else if (atomCount > 2) {
                                                }
                                            }
                                        }
                                        scan.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                            scanC.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                        if (atomCount != 2) {
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("Error: select 2 atoms.")
                                    .setTitle("Distance measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
//                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
//                                        int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
//                                        exec("touch "+getFilesDir()+"/Coordinates.tmp");
//
//                                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                        progressDialog.setTitle("Please wait...");
//                                        progressDialog.setMessage("Cancelling the atom selection...");
//                                        progressDialog.setCancelable(false);
//                                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                            @Override
//                                            public void onClick(DialogInterface dialog, int which) {
//                                                dialog.dismiss();
//                                            }
//                                        });
//                                        progressDialog.show();
//
//                                        new Thread() {
//                                            public void run() {
//
//                                                try {
//                                                    Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
//                                                    while (scanC.hasNext()) {
//                                                        String curLineC = scanC.nextLine();
//                                                        String[] splittedC = curLineC.split("\\s");
//                                                        String atom1C = splittedC[0].trim();
//                                                        String atom2C = splittedC[1].trim();
//                                                        String x1_projC = splittedC[2].trim();
//                                                        String y1_projC = splittedC[3].trim();
//                                                        String x2_projC = splittedC[4].trim();
//                                                        String y2_projC = splittedC[5].trim();
//                                                        String z_coordC = splittedC[6].trim();
//                                                        String radiusC = splittedC[7].trim();
//                                                        String atom_colorC = splittedC[8].trim();
//                                                        String atom_numberC = splittedC[9].trim();
//                                                        String typeC = splittedC[10].trim();
//
//
//                                                        // write the file
//                                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                        if (typeC.equals("C")) {
//                                                            if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            } else {
//                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            }
//                                                        } else {
//                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                        }
//                                                        outputWriter_atoms.close();
//                                                    }
//                                                    scanC.close();
//                                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
//                                                } catch (Exception e) {
//                                                    e.printStackTrace();
//                                                }
//
//                                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                onFinish();
//                                            }
//                                            public void onFinish() {
//                                                progressDialog.dismiss();
//                                            }
//                                        }.start();
                                        }
                                    })
                                    .create();
                            dialog.show();
                        } else if (atomCount == 2) {
                            double distanceAng = Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2)+Math.pow((z1-z2),2));
                            String distanceAng_formatted = String.format("%.4f", distanceAng);
                            while (distanceAng_formatted.contains(",")){
                                distanceAng_formatted = distanceAng_formatted.replace(",", ".");
                            }
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("distance = "+distanceAng_formatted+" Ang")
                                    .setTitle("Distance measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                                            exec("touch "+getFilesDir()+"/Coordinates.tmp");

//                                            ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                            progressDialog.setTitle("Please wait...");
//                                            progressDialog.setMessage("Cancelling the atom selection...");
//                                            progressDialog.setCancelable(false);
//                                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                                @Override
//                                                public void onClick(DialogInterface dialog, int which) {
//                                                    dialog.dismiss();
//                                                }
//                                            });
//                                            progressDialog.show();
//
//                                            new Thread() {
//                                                public void run() {

                                                    try {
                                                        Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                                        while (scanC.hasNext()) {
                                                            String curLineC = scanC.nextLine();
                                                            String[] splittedC = curLineC.split("\\s");
                                                            String atom1C = splittedC[0].trim();
                                                            String atom2C = splittedC[1].trim();
                                                            String x1_projC = splittedC[2].trim();
                                                            String y1_projC = splittedC[3].trim();
                                                            String x2_projC = splittedC[4].trim();
                                                            String y2_projC = splittedC[5].trim();
                                                            String z_coordC = splittedC[6].trim();
                                                            String radiusC = splittedC[7].trim();
                                                            String atom_colorC = splittedC[8].trim();
                                                            String atom_numberC = splittedC[9].trim();
                                                            String typeC = splittedC[10].trim();


                                                            // write the file
                                                            FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                            if (typeC.equals("C")) {
                                                                if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                                                    outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                } else {
                                                                    outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                }
                                                            } else {
                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                            }
                                                            outputWriter_atoms.close();
                                                        }
                                                        scanC.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");


                                                        // reset also the file No. 2
                                                        Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                        while (scan.hasNext()) {
                                                            String curLine = scan.nextLine();
                                                            String[] splitted = curLine.split("\\s");
                                                            String atom = splitted[0].trim();
                                                            String x_coord = splitted[1].trim();
                                                            String y_coord = splitted[2].trim();
                                                            String z_coord = splitted[3].trim();
                                                            String radius = splitted[4].trim();
                                                            String atom_color = splitted[5].trim();
                                                            String text_color = splitted[6].trim();
                                                            String atom_number = splitted[7].trim();
                                                            String col_at_border = splitted[8].trim();
                                                            String touch_time = splitted[9].trim();

                                                            // write the file
                                                            FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                            outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                                            outputWriter.close();

                                                        }
                                                        scan.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }

                                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                    onFinish();
//                                                }
//                                                public void onFinish() {
//                                                    progressDialog.dismiss();
//                                                }
//                                            }.start();

                                        }
                                    })
                                    .create();
                            dialog.show();
                        }





                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                    }
//                }.start();
                }


            }
        };
    }

    private View.OnClickListener angleButtonClick; {
        angleButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                exec("touch "+getFilesDir()+"/Coordinates.tmp");

                String Replacement = exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp");

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Measuring the distance...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();

//                new Thread() {
//                    public void run() {

                    try {
                        exec("cp "+getFilesDir()+"/canvas3d/Coordinates.tmp "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                        try {
                            String Z_sort = exec("sort -g -rk5 "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_measure.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv "+getFilesDir()+"/Coordinates_measure.tmp "+getFilesDir()+"/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                        double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                        double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                        double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));

                        int atomCount = 0;
                        double x1 = 0;
                        double x2 = 0;
                        double x3 = 0;
                        double y1 = 0;
                        double y2 = 0;
                        double y3 = 0;
                        double z1 = 0;
                        double z2 = 0;
                        double z3 = 0;

                        try {
                            Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_measure.tmp"));
                            while (scanC.hasNext()) {
                                String curLineC = scanC.nextLine();
                                String[] splittedC = curLineC.split("\\s");
                                String atom1C = splittedC[0].trim();
                                String atom2C = splittedC[1].trim();
                                String x1_projC = splittedC[2].trim();
                                String y1_projC = splittedC[3].trim();
                                String x2_projC = splittedC[4].trim();
                                String y2_projC = splittedC[5].trim();
                                String z_coordC = splittedC[6].trim();
                                String radiusC = splittedC[7].trim();
                                String atom_colorC = splittedC[8].trim();
                                String atom_numberC = splittedC[9].trim();
                                String typeC = splittedC[10].trim();

                                if (typeC.equals("C")) {
                                    try {
                                        Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                        while (scan.hasNext()) {
                                            String curLine = scan.nextLine();
                                            String[] splitted = curLine.split("\\s");
                                            String atom = splitted[0].trim();
                                            String x_coord = splitted[1].trim();
                                            String y_coord = splitted[2].trim();
                                            String z_coord = splitted[3].trim();
                                            String radius = splitted[4].trim();
                                            String atom_color = splitted[5].trim();
                                            String text_color = splitted[6].trim();
                                            String atom_number = splitted[7].trim();
                                            String col_at_border = splitted[8].trim();
                                            String touch_time = splitted[9].trim();

                                            int radius_pix = (int) (Double.valueOf(radius) * 100);

                                            // project 3D geometry to z = 0
                                            double A = 0;
                                            double B = 0;
                                            double C = 1;
                                            double D = 0;
                                            double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            // because of canvas - input variables x&y have to be integers, not doubles
                                            int x_projection = (int) (x_proj * 100);
                                            int y_projection = (int) (y_proj * 100);
                                            int z_projection = (int) (z_proj * 100);

                                            if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                atomCount++;
                                                if (atomCount == 1){
                                                    x1 = x_proj;
                                                    y1 = y_proj;
                                                    z1 = z_proj;
                                                } else if (atomCount == 2) {
                                                    x2 = x_proj;
                                                    y2 = y_proj;
                                                    z2 = z_proj;
                                                } else if (atomCount == 3) {
                                                    x3 = x_proj;
                                                    y3 = y_proj;
                                                    z3 = z_proj;
                                                } else if (atomCount > 3) {
                                                }
                                            }
                                        }
                                        scan.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                            scanC.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                        if (atomCount != 3) {
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("Error: select 3 atoms.")
                                    .setTitle("Angle measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
//                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
//                                        int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
//                                        exec("touch "+getFilesDir()+"/Coordinates.tmp");
//
//                                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                        progressDialog.setTitle("Please wait...");
//                                        progressDialog.setMessage("Cancelling the atom selection...");
//                                        progressDialog.setCancelable(false);
//                                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                            @Override
//                                            public void onClick(DialogInterface dialog, int which) {
//                                                dialog.dismiss();
//                                            }
//                                        });
//                                        progressDialog.show();
//
//                                        new Thread() {
//                                            public void run() {
//
//                                                try {
//                                                    Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
//                                                    while (scanC.hasNext()) {
//                                                        String curLineC = scanC.nextLine();
//                                                        String[] splittedC = curLineC.split("\\s");
//                                                        String atom1C = splittedC[0].trim();
//                                                        String atom2C = splittedC[1].trim();
//                                                        String x1_projC = splittedC[2].trim();
//                                                        String y1_projC = splittedC[3].trim();
//                                                        String x2_projC = splittedC[4].trim();
//                                                        String y2_projC = splittedC[5].trim();
//                                                        String z_coordC = splittedC[6].trim();
//                                                        String radiusC = splittedC[7].trim();
//                                                        String atom_colorC = splittedC[8].trim();
//                                                        String atom_numberC = splittedC[9].trim();
//                                                        String typeC = splittedC[10].trim();
//
//
//                                                        // write the file
//                                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                        if (typeC.equals("C")) {
//                                                            if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            } else {
//                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            }
//                                                        } else {
//                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                        }
//                                                        outputWriter_atoms.close();
//                                                    }
//                                                    scanC.close();
//                                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
//                                                } catch (Exception e) {
//                                                    e.printStackTrace();
//                                                }
//
//                                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                onFinish();
//                                            }
//                                            public void onFinish() {
//                                                progressDialog.dismiss();
//                                            }
//                                        }.start();
                                        }
                                    })
                                    .create();
                            dialog.show();
                        } else if (atomCount == 3) {

                            double vect_a_len = Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2)+Math.pow((z1-z2),2));
                            double vect_a_x = (x1-x2)/vect_a_len;
                            double vect_a_y = (y1-y2)/vect_a_len;
                            double vect_a_z = (z1-z2)/vect_a_len;

                            double vect_b_len = Math.sqrt(Math.pow((x2-x3),2)+Math.pow((y2-y3),2)+Math.pow((z2-z3),2));
                            double vect_b_x = (x3-x2)/vect_b_len;
                            double vect_b_y = (y3-y2)/vect_b_len;
                            double vect_b_z = (z3-z2)/vect_b_len;

                            double dot_product_a_b = vect_a_x*vect_b_x + vect_a_y*vect_b_y + vect_a_z*vect_b_z;

                            double angleDeg = (360/(2*3.14159265359))*Math.acos(dot_product_a_b);

                            String angleDeg_formatted = String.format("%.4f", angleDeg);
                            while (angleDeg_formatted.contains(",")){
                                angleDeg_formatted = angleDeg_formatted.replace(",", ".");
                            }
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("angle = "+angleDeg_formatted+"°")
                                    .setTitle("Angle measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                                            exec("touch "+getFilesDir()+"/Coordinates.tmp");

                                            ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                                            progressDialog.setTitle("Please wait...");
                                            progressDialog.setMessage("Cancelling the atom selection...");
                                            progressDialog.setCancelable(false);
                                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    dialog.dismiss();
                                                }
                                            });
                                            progressDialog.show();

                                            new Thread() {
                                                public void run() {

                                                    try {
                                                        Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                                        while (scanC.hasNext()) {
                                                            String curLineC = scanC.nextLine();
                                                            String[] splittedC = curLineC.split("\\s");
                                                            String atom1C = splittedC[0].trim();
                                                            String atom2C = splittedC[1].trim();
                                                            String x1_projC = splittedC[2].trim();
                                                            String y1_projC = splittedC[3].trim();
                                                            String x2_projC = splittedC[4].trim();
                                                            String y2_projC = splittedC[5].trim();
                                                            String z_coordC = splittedC[6].trim();
                                                            String radiusC = splittedC[7].trim();
                                                            String atom_colorC = splittedC[8].trim();
                                                            String atom_numberC = splittedC[9].trim();
                                                            String typeC = splittedC[10].trim();


                                                            // write the file
                                                            FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                            if (typeC.equals("C")) {
                                                                if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                                                    outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                } else {
                                                                    outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                }
                                                            } else {
                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                            }
                                                            outputWriter_atoms.close();
                                                        }
                                                        scanC.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");

                                                        // reset also the file No. 2
                                                        Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                        while (scan.hasNext()) {
                                                            String curLine = scan.nextLine();
                                                            String[] splitted = curLine.split("\\s");
                                                            String atom = splitted[0].trim();
                                                            String x_coord = splitted[1].trim();
                                                            String y_coord = splitted[2].trim();
                                                            String z_coord = splitted[3].trim();
                                                            String radius = splitted[4].trim();
                                                            String atom_color = splitted[5].trim();
                                                            String text_color = splitted[6].trim();
                                                            String atom_number = splitted[7].trim();
                                                            String col_at_border = splitted[8].trim();
                                                            String touch_time = splitted[9].trim();

                                                            // write the file
                                                            FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                            outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                                            outputWriter.close();

                                                        }
                                                        scan.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }

                                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                                                    onFinish();
                                                }
                                                public void onFinish() {
                                                    progressDialog.dismiss();
                                                }
                                            }.start();

                                        }
                                    })
                                    .create();
                            dialog.show();
                        }





                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                    }
//                }.start();
                } else {
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Measuring the distance...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();

//                new Thread() {
//                    public void run() {

                    try {
                        exec("cp "+getFilesDir()+"/canvas3d/Coordinates.tmp "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                        try {
                            String Z_sort = exec("sort -g -rk5 "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_measure.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv "+getFilesDir()+"/Coordinates_measure.tmp "+getFilesDir()+"/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                        double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                        double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                        double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));

                        int atomCount = 0;
                        double x1 = 0;
                        double x2 = 0;
                        double x3 = 0;
                        double y1 = 0;
                        double y2 = 0;
                        double y3 = 0;
                        double z1 = 0;
                        double z2 = 0;
                        double z3 = 0;

                        try {
                            Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_measure.tmp"));
                            while (scanC.hasNext()) {
                                String curLineC = scanC.nextLine();
                                String[] splittedC = curLineC.split("\\s");
                                String atom1C = splittedC[0].trim();
                                String atom2C = splittedC[1].trim();
                                String x1_projC = splittedC[2].trim();
                                String y1_projC = splittedC[3].trim();
                                String x2_projC = splittedC[4].trim();
                                String y2_projC = splittedC[5].trim();
                                String z_coordC = splittedC[6].trim();
                                String radiusC = splittedC[7].trim();
                                String atom_colorC = splittedC[8].trim();
                                String atom_numberC = splittedC[9].trim();
                                String typeC = splittedC[10].trim();

                                if (typeC.equals("C")) {
                                    try {
                                        Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                        while (scan.hasNext()) {
                                            String curLine = scan.nextLine();
                                            String[] splitted = curLine.split("\\s");
                                            String atom = splitted[0].trim();
                                            String x_coord = splitted[1].trim();
                                            String y_coord = splitted[2].trim();
                                            String z_coord = splitted[3].trim();
                                            String radius = splitted[4].trim();
                                            String atom_color = splitted[5].trim();
                                            String text_color = splitted[6].trim();
                                            String atom_number = splitted[7].trim();
                                            String col_at_border = splitted[8].trim();
                                            String touch_time = splitted[9].trim();

                                            int radius_pix = (int) (Double.valueOf(radius) * 100);

                                            // project 3D geometry to z = 0
                                            double A = 0;
                                            double B = 0;
                                            double C = 1;
                                            double D = 0;
                                            double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            // because of canvas - input variables x&y have to be integers, not doubles
                                            int x_projection = (int) (x_proj * 100);
                                            int y_projection = (int) (y_proj * 100);
                                            int z_projection = (int) (z_proj * 100);

                                            if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                atomCount++;
                                                if (atomCount == 1){
                                                    x1 = x_proj;
                                                    y1 = y_proj;
                                                    z1 = z_proj;
                                                } else if (atomCount == 2) {
                                                    x2 = x_proj;
                                                    y2 = y_proj;
                                                    z2 = z_proj;
                                                } else if (atomCount == 3) {
                                                    x3 = x_proj;
                                                    y3 = y_proj;
                                                    z3 = z_proj;
                                                } else if (atomCount > 3) {
                                                }
                                            }
                                        }
                                        scan.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                            scanC.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                        if (atomCount != 3) {
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("Error: select 3 atoms.")
                                    .setTitle("Angle measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
//                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
//                                        int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
//                                        exec("touch "+getFilesDir()+"/Coordinates.tmp");
//
//                                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                        progressDialog.setTitle("Please wait...");
//                                        progressDialog.setMessage("Cancelling the atom selection...");
//                                        progressDialog.setCancelable(false);
//                                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                            @Override
//                                            public void onClick(DialogInterface dialog, int which) {
//                                                dialog.dismiss();
//                                            }
//                                        });
//                                        progressDialog.show();
//
//                                        new Thread() {
//                                            public void run() {
//
//                                                try {
//                                                    Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
//                                                    while (scanC.hasNext()) {
//                                                        String curLineC = scanC.nextLine();
//                                                        String[] splittedC = curLineC.split("\\s");
//                                                        String atom1C = splittedC[0].trim();
//                                                        String atom2C = splittedC[1].trim();
//                                                        String x1_projC = splittedC[2].trim();
//                                                        String y1_projC = splittedC[3].trim();
//                                                        String x2_projC = splittedC[4].trim();
//                                                        String y2_projC = splittedC[5].trim();
//                                                        String z_coordC = splittedC[6].trim();
//                                                        String radiusC = splittedC[7].trim();
//                                                        String atom_colorC = splittedC[8].trim();
//                                                        String atom_numberC = splittedC[9].trim();
//                                                        String typeC = splittedC[10].trim();
//
//
//                                                        // write the file
//                                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                        if (typeC.equals("C")) {
//                                                            if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            } else {
//                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            }
//                                                        } else {
//                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                        }
//                                                        outputWriter_atoms.close();
//                                                    }
//                                                    scanC.close();
//                                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
//                                                } catch (Exception e) {
//                                                    e.printStackTrace();
//                                                }
//
//                                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                onFinish();
//                                            }
//                                            public void onFinish() {
//                                                progressDialog.dismiss();
//                                            }
//                                        }.start();
                                        }
                                    })
                                    .create();
                            dialog.show();
                        } else if (atomCount == 3) {

                            double vect_a_len = Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2)+Math.pow((z1-z2),2));
                            double vect_a_x = (x1-x2)/vect_a_len;
                            double vect_a_y = (y1-y2)/vect_a_len;
                            double vect_a_z = (z1-z2)/vect_a_len;

                            double vect_b_len = Math.sqrt(Math.pow((x2-x3),2)+Math.pow((y2-y3),2)+Math.pow((z2-z3),2));
                            double vect_b_x = (x3-x2)/vect_b_len;
                            double vect_b_y = (y3-y2)/vect_b_len;
                            double vect_b_z = (z3-z2)/vect_b_len;

                            double dot_product_a_b = vect_a_x*vect_b_x + vect_a_y*vect_b_y + vect_a_z*vect_b_z;

                            double angleDeg = (360/(2*3.14159265359))*Math.acos(dot_product_a_b);

                            String angleDeg_formatted = String.format("%.4f", angleDeg);
                            while (angleDeg_formatted.contains(",")){
                                angleDeg_formatted = angleDeg_formatted.replace(",", ".");
                            }
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("angle = "+angleDeg_formatted+"°")
                                    .setTitle("Angle measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                                            exec("touch "+getFilesDir()+"/Coordinates.tmp");

//                                            ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                            progressDialog.setTitle("Please wait...");
//                                            progressDialog.setMessage("Cancelling the atom selection...");
//                                            progressDialog.setCancelable(false);
//                                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                                @Override
//                                                public void onClick(DialogInterface dialog, int which) {
//                                                    dialog.dismiss();
//                                                }
//                                            });
//                                            progressDialog.show();
//
//                                            new Thread() {
//                                                public void run() {

                                                    try {
                                                        Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                                        while (scanC.hasNext()) {
                                                            String curLineC = scanC.nextLine();
                                                            String[] splittedC = curLineC.split("\\s");
                                                            String atom1C = splittedC[0].trim();
                                                            String atom2C = splittedC[1].trim();
                                                            String x1_projC = splittedC[2].trim();
                                                            String y1_projC = splittedC[3].trim();
                                                            String x2_projC = splittedC[4].trim();
                                                            String y2_projC = splittedC[5].trim();
                                                            String z_coordC = splittedC[6].trim();
                                                            String radiusC = splittedC[7].trim();
                                                            String atom_colorC = splittedC[8].trim();
                                                            String atom_numberC = splittedC[9].trim();
                                                            String typeC = splittedC[10].trim();


                                                            // write the file
                                                            FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                            if (typeC.equals("C")) {
                                                                if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                                                    outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                } else {
                                                                    outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                }
                                                            } else {
                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                            }
                                                            outputWriter_atoms.close();
                                                        }
                                                        scanC.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");

                                                        // reset also the file No. 2
                                                        Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                        while (scan.hasNext()) {
                                                            String curLine = scan.nextLine();
                                                            String[] splitted = curLine.split("\\s");
                                                            String atom = splitted[0].trim();
                                                            String x_coord = splitted[1].trim();
                                                            String y_coord = splitted[2].trim();
                                                            String z_coord = splitted[3].trim();
                                                            String radius = splitted[4].trim();
                                                            String atom_color = splitted[5].trim();
                                                            String text_color = splitted[6].trim();
                                                            String atom_number = splitted[7].trim();
                                                            String col_at_border = splitted[8].trim();
                                                            String touch_time = splitted[9].trim();

                                                            // write the file
                                                            FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                            outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                                            outputWriter.close();

                                                        }
                                                        scan.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }

                                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                    onFinish();
//                                                }
//                                                public void onFinish() {
//                                                    progressDialog.dismiss();
//                                                }
//                                            }.start();

                                        }
                                    })
                                    .create();
                            dialog.show();
                        }





                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                    }
//                }.start();
                }


            }
        };
    }

    private View.OnClickListener dihedralButtonClick; {
        dihedralButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                exec("touch "+getFilesDir()+"/Coordinates.tmp");

                String Replacement = exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp");

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Measuring the distance...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();

//                new Thread() {
//                    public void run() {

                    try {
                        exec("cp "+getFilesDir()+"/canvas3d/Coordinates.tmp "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                        try {
                            String Z_sort = exec("sort -g -rk5 "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_measure.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv "+getFilesDir()+"/Coordinates_measure.tmp "+getFilesDir()+"/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                        double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                        double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                        double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));

                        int atomCount = 0;
                        double x1 = 0;
                        double x2 = 0;
                        double x3 = 0;
                        double x4 = 0;
                        double y1 = 0;
                        double y2 = 0;
                        double y3 = 0;
                        double y4 = 0;
                        double z1 = 0;
                        double z2 = 0;
                        double z3 = 0;
                        double z4 = 0;

                        try {
                            Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_measure.tmp"));
                            while (scanC.hasNext()) {
                                String curLineC = scanC.nextLine();
                                String[] splittedC = curLineC.split("\\s");
                                String atom1C = splittedC[0].trim();
                                String atom2C = splittedC[1].trim();
                                String x1_projC = splittedC[2].trim();
                                String y1_projC = splittedC[3].trim();
                                String x2_projC = splittedC[4].trim();
                                String y2_projC = splittedC[5].trim();
                                String z_coordC = splittedC[6].trim();
                                String radiusC = splittedC[7].trim();
                                String atom_colorC = splittedC[8].trim();
                                String atom_numberC = splittedC[9].trim();
                                String typeC = splittedC[10].trim();

                                if (typeC.equals("C")) {
                                    try {
                                        Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                        while (scan.hasNext()) {
                                            String curLine = scan.nextLine();
                                            String[] splitted = curLine.split("\\s");
                                            String atom = splitted[0].trim();
                                            String x_coord = splitted[1].trim();
                                            String y_coord = splitted[2].trim();
                                            String z_coord = splitted[3].trim();
                                            String radius = splitted[4].trim();
                                            String atom_color = splitted[5].trim();
                                            String text_color = splitted[6].trim();
                                            String atom_number = splitted[7].trim();
                                            String col_at_border = splitted[8].trim();
                                            String touch_time = splitted[9].trim();

                                            int radius_pix = (int) (Double.valueOf(radius) * 100);

                                            // project 3D geometry to z = 0
                                            double A = 0;
                                            double B = 0;
                                            double C = 1;
                                            double D = 0;
                                            double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            // because of canvas - input variables x&y have to be integers, not doubles
                                            int x_projection = (int) (x_proj * 100);
                                            int y_projection = (int) (y_proj * 100);
                                            int z_projection = (int) (z_proj * 100);

                                            if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                atomCount++;
                                                if (atomCount == 1){
                                                    x1 = x_proj;
                                                    y1 = y_proj;
                                                    z1 = z_proj;
                                                } else if (atomCount == 2) {
                                                    x2 = x_proj;
                                                    y2 = y_proj;
                                                    z2 = z_proj;
                                                } else if (atomCount == 3) {
                                                    x3 = x_proj;
                                                    y3 = y_proj;
                                                    z3 = z_proj;
                                                } else if (atomCount == 4) {
                                                    x4 = x_proj;
                                                    y4 = y_proj;
                                                    z4 = z_proj;
                                                } else if (atomCount > 4) {
                                                }
                                            }
                                        }
                                        scan.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                            scanC.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                        if (atomCount != 4) {
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("Error: select 4 atoms.")
                                    .setTitle("Dihedral angle measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
//                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
//                                        int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
//                                        exec("touch "+getFilesDir()+"/Coordinates.tmp");
//
//                                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                        progressDialog.setTitle("Please wait...");
//                                        progressDialog.setMessage("Cancelling the atom selection...");
//                                        progressDialog.setCancelable(false);
//                                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                            @Override
//                                            public void onClick(DialogInterface dialog, int which) {
//                                                dialog.dismiss();
//                                            }
//                                        });
//                                        progressDialog.show();
//
//                                        new Thread() {
//                                            public void run() {
//
//                                                try {
//                                                    Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
//                                                    while (scanC.hasNext()) {
//                                                        String curLineC = scanC.nextLine();
//                                                        String[] splittedC = curLineC.split("\\s");
//                                                        String atom1C = splittedC[0].trim();
//                                                        String atom2C = splittedC[1].trim();
//                                                        String x1_projC = splittedC[2].trim();
//                                                        String y1_projC = splittedC[3].trim();
//                                                        String x2_projC = splittedC[4].trim();
//                                                        String y2_projC = splittedC[5].trim();
//                                                        String z_coordC = splittedC[6].trim();
//                                                        String radiusC = splittedC[7].trim();
//                                                        String atom_colorC = splittedC[8].trim();
//                                                        String atom_numberC = splittedC[9].trim();
//                                                        String typeC = splittedC[10].trim();
//
//
//                                                        // write the file
//                                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                        if (typeC.equals("C")) {
//                                                            if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            } else {
//                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            }
//                                                        } else {
//                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                        }
//                                                        outputWriter_atoms.close();
//                                                    }
//                                                    scanC.close();
//                                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
//                                                } catch (Exception e) {
//                                                    e.printStackTrace();
//                                                }
//
//                                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                onFinish();
//                                            }
//                                            public void onFinish() {
//                                                progressDialog.dismiss();
//                                            }
//                                        }.start();
                                        }
                                    })
                                    .create();
                            dialog.show();
                        } else if (atomCount == 4) {

                            double vect_a_len = Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2)+Math.pow((z1-z2),2));
                            double vect_a_x = (x2-x1)/vect_a_len;
                            double vect_a_y = (y2-y1)/vect_a_len;
                            double vect_a_z = (z2-z1)/vect_a_len;

                            double vect_b_len = Math.sqrt(Math.pow((x2-x3),2)+Math.pow((y2-y3),2)+Math.pow((z2-z3),2));
                            double vect_b_x = (x2-x3)/vect_b_len;
                            double vect_b_y = (y2-y3)/vect_b_len;
                            double vect_b_z = (z2-z3)/vect_b_len;

                            double vect_c_len = Math.sqrt(Math.pow((x3-x4),2)+Math.pow((y3-y4),2)+Math.pow((z3-z4),2));
                            double vect_c_x = (x4-x3)/vect_c_len;
                            double vect_c_y = (y4-y3)/vect_c_len;
                            double vect_c_z = (z4-z3)/vect_c_len;

                            double n1_x = vect_a_y*vect_b_z - vect_a_z*vect_b_y;
                            double n1_y = vect_a_z*vect_b_x - vect_a_x*vect_b_z;
                            double n1_z = vect_a_x*vect_b_y - vect_a_y*vect_b_x;

                            double n2_x = vect_b_y*vect_c_z - vect_b_z*vect_c_y;
                            double n2_y = vect_b_z*vect_c_x - vect_b_x*vect_c_z;
                            double n2_z = vect_b_x*vect_c_y - vect_b_y*vect_c_x;

                            double m_x = n1_y*vect_b_z - n1_z*vect_b_y;
                            double m_y = n1_z*vect_b_x - n1_x*vect_b_z;
                            double m_z = n1_x*vect_b_y - n1_y*vect_b_x;

                            double dot_product_n1_n2 = n1_x*n2_x + n1_y*n2_y + n1_z*n2_z;
                            double dot_product_m_n2 = m_x*n2_x + m_y*n2_y + m_z*n2_z;

                            double dihDeg = (360/(2*3.14159265359))*Math.atan2(dot_product_m_n2, dot_product_n1_n2);

                            String dihDeg_formatted = String.format("%.4f", dihDeg);
                            while (dihDeg_formatted.contains(",")){
                                dihDeg_formatted = dihDeg_formatted.replace(",", ".");
                            }
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("dihedral angle = "+dihDeg_formatted+"°")
                                    .setTitle("Distance measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                                            exec("touch "+getFilesDir()+"/Coordinates.tmp");

                                            ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                                            progressDialog.setTitle("Please wait...");
                                            progressDialog.setMessage("Cancelling the atom selection...");
                                            progressDialog.setCancelable(false);
                                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                                                @Override
                                                public void onClick(DialogInterface dialog, int which) {
                                                    dialog.dismiss();
                                                }
                                            });
                                            progressDialog.show();

                                            new Thread() {
                                                public void run() {

                                                    try {
                                                        Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                                        while (scanC.hasNext()) {
                                                            String curLineC = scanC.nextLine();
                                                            String[] splittedC = curLineC.split("\\s");
                                                            String atom1C = splittedC[0].trim();
                                                            String atom2C = splittedC[1].trim();
                                                            String x1_projC = splittedC[2].trim();
                                                            String y1_projC = splittedC[3].trim();
                                                            String x2_projC = splittedC[4].trim();
                                                            String y2_projC = splittedC[5].trim();
                                                            String z_coordC = splittedC[6].trim();
                                                            String radiusC = splittedC[7].trim();
                                                            String atom_colorC = splittedC[8].trim();
                                                            String atom_numberC = splittedC[9].trim();
                                                            String typeC = splittedC[10].trim();


                                                            // write the file
                                                            FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                            if (typeC.equals("C")) {
                                                                if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                                                    outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                } else {
                                                                    outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                }
                                                            } else {
                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                            }
                                                            outputWriter_atoms.close();
                                                        }
                                                        scanC.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");

                                                        // reset also the file No. 2
                                                        Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                        while (scan.hasNext()) {
                                                            String curLine = scan.nextLine();
                                                            String[] splitted = curLine.split("\\s");
                                                            String atom = splitted[0].trim();
                                                            String x_coord = splitted[1].trim();
                                                            String y_coord = splitted[2].trim();
                                                            String z_coord = splitted[3].trim();
                                                            String radius = splitted[4].trim();
                                                            String atom_color = splitted[5].trim();
                                                            String text_color = splitted[6].trim();
                                                            String atom_number = splitted[7].trim();
                                                            String col_at_border = splitted[8].trim();
                                                            String touch_time = splitted[9].trim();

                                                            // write the file
                                                            FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                            outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                                            outputWriter.close();

                                                        }
                                                        scan.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }

                                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                                                    onFinish();
                                                }
                                                public void onFinish() {
                                                    progressDialog.dismiss();
                                                }
                                            }.start();

                                        }
                                    })
                                    .create();
                            dialog.show();
                        }





                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                    }
//                }.start();
                } else {
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Measuring the distance...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();

//                new Thread() {
//                    public void run() {

                    try {
                        exec("cp "+getFilesDir()+"/canvas3d/Coordinates.tmp "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                        try {
                            String Z_sort = exec("sort -g -rk5 "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_measure.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv "+getFilesDir()+"/Coordinates_measure.tmp "+getFilesDir()+"/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                        double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                        double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                        double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));

                        int atomCount = 0;
                        double x1 = 0;
                        double x2 = 0;
                        double x3 = 0;
                        double x4 = 0;
                        double y1 = 0;
                        double y2 = 0;
                        double y3 = 0;
                        double y4 = 0;
                        double z1 = 0;
                        double z2 = 0;
                        double z3 = 0;
                        double z4 = 0;

                        try {
                            Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_measure.tmp"));
                            while (scanC.hasNext()) {
                                String curLineC = scanC.nextLine();
                                String[] splittedC = curLineC.split("\\s");
                                String atom1C = splittedC[0].trim();
                                String atom2C = splittedC[1].trim();
                                String x1_projC = splittedC[2].trim();
                                String y1_projC = splittedC[3].trim();
                                String x2_projC = splittedC[4].trim();
                                String y2_projC = splittedC[5].trim();
                                String z_coordC = splittedC[6].trim();
                                String radiusC = splittedC[7].trim();
                                String atom_colorC = splittedC[8].trim();
                                String atom_numberC = splittedC[9].trim();
                                String typeC = splittedC[10].trim();

                                if (typeC.equals("C")) {
                                    try {
                                        Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                        while (scan.hasNext()) {
                                            String curLine = scan.nextLine();
                                            String[] splitted = curLine.split("\\s");
                                            String atom = splitted[0].trim();
                                            String x_coord = splitted[1].trim();
                                            String y_coord = splitted[2].trim();
                                            String z_coord = splitted[3].trim();
                                            String radius = splitted[4].trim();
                                            String atom_color = splitted[5].trim();
                                            String text_color = splitted[6].trim();
                                            String atom_number = splitted[7].trim();
                                            String col_at_border = splitted[8].trim();
                                            String touch_time = splitted[9].trim();

                                            int radius_pix = (int) (Double.valueOf(radius) * 100);

                                            // project 3D geometry to z = 0
                                            double A = 0;
                                            double B = 0;
                                            double C = 1;
                                            double D = 0;
                                            double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                            // because of canvas - input variables x&y have to be integers, not doubles
                                            int x_projection = (int) (x_proj * 100);
                                            int y_projection = (int) (y_proj * 100);
                                            int z_projection = (int) (z_proj * 100);

                                            if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                atomCount++;
                                                if (atomCount == 1){
                                                    x1 = x_proj;
                                                    y1 = y_proj;
                                                    z1 = z_proj;
                                                } else if (atomCount == 2) {
                                                    x2 = x_proj;
                                                    y2 = y_proj;
                                                    z2 = z_proj;
                                                } else if (atomCount == 3) {
                                                    x3 = x_proj;
                                                    y3 = y_proj;
                                                    z3 = z_proj;
                                                } else if (atomCount == 4) {
                                                    x4 = x_proj;
                                                    y4 = y_proj;
                                                    z4 = z_proj;
                                                } else if (atomCount > 4) {
                                                }
                                            }
                                        }
                                        scan.close();
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                            scanC.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                        if (atomCount != 4) {
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("Error: select 4 atoms.")
                                    .setTitle("Dihedral angle measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
//                                        exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
//                                        int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
//                                        exec("touch "+getFilesDir()+"/Coordinates.tmp");
//
//                                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                        progressDialog.setTitle("Please wait...");
//                                        progressDialog.setMessage("Cancelling the atom selection...");
//                                        progressDialog.setCancelable(false);
//                                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                            @Override
//                                            public void onClick(DialogInterface dialog, int which) {
//                                                dialog.dismiss();
//                                            }
//                                        });
//                                        progressDialog.show();
//
//                                        new Thread() {
//                                            public void run() {
//
//                                                try {
//                                                    Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
//                                                    while (scanC.hasNext()) {
//                                                        String curLineC = scanC.nextLine();
//                                                        String[] splittedC = curLineC.split("\\s");
//                                                        String atom1C = splittedC[0].trim();
//                                                        String atom2C = splittedC[1].trim();
//                                                        String x1_projC = splittedC[2].trim();
//                                                        String y1_projC = splittedC[3].trim();
//                                                        String x2_projC = splittedC[4].trim();
//                                                        String y2_projC = splittedC[5].trim();
//                                                        String z_coordC = splittedC[6].trim();
//                                                        String radiusC = splittedC[7].trim();
//                                                        String atom_colorC = splittedC[8].trim();
//                                                        String atom_numberC = splittedC[9].trim();
//                                                        String typeC = splittedC[10].trim();
//
//
//                                                        // write the file
//                                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                        if (typeC.equals("C")) {
//                                                            if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            } else {
//                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                            }
//                                                        } else {
//                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                        }
//                                                        outputWriter_atoms.close();
//                                                    }
//                                                    scanC.close();
//                                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
//                                                } catch (Exception e) {
//                                                    e.printStackTrace();
//                                                }
//
//                                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                onFinish();
//                                            }
//                                            public void onFinish() {
//                                                progressDialog.dismiss();
//                                            }
//                                        }.start();
                                        }
                                    })
                                    .create();
                            dialog.show();
                        } else if (atomCount == 4) {

                            double vect_a_len = Math.sqrt(Math.pow((x1-x2),2)+Math.pow((y1-y2),2)+Math.pow((z1-z2),2));
                            double vect_a_x = (x2-x1)/vect_a_len;
                            double vect_a_y = (y2-y1)/vect_a_len;
                            double vect_a_z = (z2-z1)/vect_a_len;

                            double vect_b_len = Math.sqrt(Math.pow((x2-x3),2)+Math.pow((y2-y3),2)+Math.pow((z2-z3),2));
                            double vect_b_x = (x2-x3)/vect_b_len;
                            double vect_b_y = (y2-y3)/vect_b_len;
                            double vect_b_z = (z2-z3)/vect_b_len;

                            double vect_c_len = Math.sqrt(Math.pow((x3-x4),2)+Math.pow((y3-y4),2)+Math.pow((z3-z4),2));
                            double vect_c_x = (x4-x3)/vect_c_len;
                            double vect_c_y = (y4-y3)/vect_c_len;
                            double vect_c_z = (z4-z3)/vect_c_len;

                            double n1_x = vect_a_y*vect_b_z - vect_a_z*vect_b_y;
                            double n1_y = vect_a_z*vect_b_x - vect_a_x*vect_b_z;
                            double n1_z = vect_a_x*vect_b_y - vect_a_y*vect_b_x;

                            double n2_x = vect_b_y*vect_c_z - vect_b_z*vect_c_y;
                            double n2_y = vect_b_z*vect_c_x - vect_b_x*vect_c_z;
                            double n2_z = vect_b_x*vect_c_y - vect_b_y*vect_c_x;

                            double m_x = n1_y*vect_b_z - n1_z*vect_b_y;
                            double m_y = n1_z*vect_b_x - n1_x*vect_b_z;
                            double m_z = n1_x*vect_b_y - n1_y*vect_b_x;

                            double dot_product_n1_n2 = n1_x*n2_x + n1_y*n2_y + n1_z*n2_z;
                            double dot_product_m_n2 = m_x*n2_x + m_y*n2_y + m_z*n2_z;

                            double dihDeg = (360/(2*3.14159265359))*Math.atan2(dot_product_m_n2, dot_product_n1_n2);

                            String dihDeg_formatted = String.format("%.4f", dihDeg);
                            while (dihDeg_formatted.contains(",")){
                                dihDeg_formatted = dihDeg_formatted.replace(",", ".");
                            }
                            final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                    .setMessage("dihedral angle = "+dihDeg_formatted+"°")
                                    .setTitle("Distance measurement")
                                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int id) {
                                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates_measure.tmp");
                                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                                            exec("touch "+getFilesDir()+"/Coordinates.tmp");

//                                            ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                            progressDialog.setTitle("Please wait...");
//                                            progressDialog.setMessage("Cancelling the atom selection...");
//                                            progressDialog.setCancelable(false);
//                                            progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                                @Override
//                                                public void onClick(DialogInterface dialog, int which) {
//                                                    dialog.dismiss();
//                                                }
//                                            });
//                                            progressDialog.show();
//
//                                            new Thread() {
//                                                public void run() {

                                                    try {
                                                        Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                                        while (scanC.hasNext()) {
                                                            String curLineC = scanC.nextLine();
                                                            String[] splittedC = curLineC.split("\\s");
                                                            String atom1C = splittedC[0].trim();
                                                            String atom2C = splittedC[1].trim();
                                                            String x1_projC = splittedC[2].trim();
                                                            String y1_projC = splittedC[3].trim();
                                                            String x2_projC = splittedC[4].trim();
                                                            String y2_projC = splittedC[5].trim();
                                                            String z_coordC = splittedC[6].trim();
                                                            String radiusC = splittedC[7].trim();
                                                            String atom_colorC = splittedC[8].trim();
                                                            String atom_numberC = splittedC[9].trim();
                                                            String typeC = splittedC[10].trim();


                                                            // write the file
                                                            FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                            if (typeC.equals("C")) {
                                                                if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
                                                                    outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                } else {
                                                                    outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                                }
                                                            } else {
                                                                outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
                                                            }
                                                            outputWriter_atoms.close();
                                                        }
                                                        scanC.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");

                                                        // reset also the file No. 2
                                                        Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                                        while (scan.hasNext()) {
                                                            String curLine = scan.nextLine();
                                                            String[] splitted = curLine.split("\\s");
                                                            String atom = splitted[0].trim();
                                                            String x_coord = splitted[1].trim();
                                                            String y_coord = splitted[2].trim();
                                                            String z_coord = splitted[3].trim();
                                                            String radius = splitted[4].trim();
                                                            String atom_color = splitted[5].trim();
                                                            String text_color = splitted[6].trim();
                                                            String atom_number = splitted[7].trim();
                                                            String col_at_border = splitted[8].trim();
                                                            String touch_time = splitted[9].trim();

                                                            // write the file
                                                            FileOutputStream fileout = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                            outputWriter.write(atom+"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+touch_time+"\n");
                                                            outputWriter.close();

                                                        }
                                                        scan.close();
                                                        exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }

                                                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                    onFinish();
//                                                }
//                                                public void onFinish() {
//                                                    progressDialog.dismiss();
//                                                }
//                                            }.start();

                                        }
                                    })
                                    .create();
                            dialog.show();
                        }





                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                    }
//                }.start();
                }


            }
        };
    }

    private View.OnClickListener reorderButtonClick; {
        reorderButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                exec("touch "+getFilesDir()+"/Coordinates.tmp");

                String Replacement = exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp");

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    try {
                        // get knowledge on number of already existing lines in the file
                        InputStream inputStream = new FileInputStream(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                        LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                        try {
                            lineNumberReader.skip(Long.MAX_VALUE);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        int linesInFile = lineNumberReader.getLineNumber();


                        String AtomNumber = String.valueOf(linesInFile);
                        FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp", MODE_PRIVATE);
                        OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                        outputWriter0.write(AtomNumber);
                        outputWriter0.write("\n");
                        outputWriter0.write("\n");
                        outputWriter0.close();


                        exec("cp " + getFilesDir() + "/canvas3d/Coordinates.tmp " + getFilesDir() + "/canvas3d/Coordinates_reorder.tmp");
                        try {
                            String Z_sort = exec("sort -g -k5 " + getFilesDir() + "/canvas3d/Coordinates_reorder.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_reorder.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv " + getFilesDir() + "/Coordinates_reorder.tmp " + getFilesDir() + "/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


                        try {


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                            double BondScale = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/BondScale.tmp"));
                            double ForegroundShiftBonds = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ForegroundShiftBonds.tmp"));
                            double ForegroundShiftText = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ForegroundShiftText.tmp"));


                            int atomCount = 0;
                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates_reorder.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();

                                    if (typeC.equals("C")) {
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                            while (scan.hasNext()) {
                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split("\\s");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();
                                                String radius = splitted[4].trim();
                                                String atom_color = splitted[5].trim();
                                                String text_color = splitted[6].trim();
                                                String atom_number = splitted[7].trim();
                                                String col_at_border = splitted[8].trim();
                                                String touch_time = splitted[9].trim();

                                                int radius_pix = (int) (Double.valueOf(radius) * 100);

                                                // project 3D geometry to z = 0
                                                double A = 0;
                                                double B = 0;
                                                double C = 1;
                                                double D = 0;
                                                double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                // because of canvas - input variables x&y have to be integers, not doubles
                                                int x_projection = (int) (x_proj * 100);
                                                int y_projection = (int) (y_proj * 100);
                                                int z_projection = (int) (z_proj * 100);

                                                if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected) && (Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                    atomCount++;
                                                    try {
                                                        FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                        outputWriter.write(atom1C + " " + x_coord + " " + y_coord + " " + z_coord + "\n");
                                                        outputWriter.close();
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }
                                                }
                                            }
                                            scan.close();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                scanC.close();

                            } catch (Exception e) {
                                e.printStackTrace();
                            }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                            if (atomCount != linesInFile) {
                                final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                        .setMessage("Error: select all atoms in the structure.")
                                        .setTitle("Reordering the XYZ file")
                                        .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int id) {
//                                                    exec("rm " + getFilesDir() + "/Coordinates.xyz.tmp");
//                                                    int ColorAtomBorder = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorder.tmp"));
//                                                    int ColorAtomBorderSelected = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorderSelected.tmp"));
//                                                    exec("touch " + getFilesDir() + "/Coordinates.tmp");
//
//                                                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                                    progressDialog.setTitle("Please wait...");
//                                                    progressDialog.setMessage("Cancelling the atom selection...");
//                                                    progressDialog.setCancelable(false);
//                                                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                                        @Override
//                                                        public void onClick(DialogInterface dialog, int which) {
//                                                            dialog.dismiss();
//                                                        }
//                                                    });
//                                                    progressDialog.show();
//
//                                                    new Thread() {
//                                                        public void run() {
//
//                                                            try {
//                                                                Scanner scanC = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.tmp"));
//                                                                while (scanC.hasNext()) {
//                                                                    String curLineC = scanC.nextLine();
//                                                                    String[] splittedC = curLineC.split("\\s");
//                                                                    String atom1C = splittedC[0].trim();
//                                                                    String atom2C = splittedC[1].trim();
//                                                                    String x1_projC = splittedC[2].trim();
//                                                                    String y1_projC = splittedC[3].trim();
//                                                                    String x2_projC = splittedC[4].trim();
//                                                                    String y2_projC = splittedC[5].trim();
//                                                                    String z_coordC = splittedC[6].trim();
//                                                                    String radiusC = splittedC[7].trim();
//                                                                    String atom_colorC = splittedC[8].trim();
//                                                                    String atom_numberC = splittedC[9].trim();
//                                                                    String typeC = splittedC[10].trim();
//
//
//                                                                    // write the file
//                                                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                                    if (typeC.equals("C")) {
//                                                                        if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                            outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                                        } else {
//                                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                                        }
//                                                                    } else {
//                                                                        outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                                    }
//                                                                    outputWriter_atoms.close();
//                                                                }
//                                                                scanC.close();
//                                                                exec("mv " + getFilesDir() + "/Coordinates.tmp " + getFilesDir() + "/canvas3d/");
//                                                            } catch (Exception e) {
//                                                                e.printStackTrace();
//                                                            }
//
//                                                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                            onFinish();
//                                                        }
//
//                                                        public void onFinish() {
//                                                            progressDialog.dismiss();
//                                                        }
//                                                    }.start();
                                            }
                                        })
                                        .create();
                                dialog.show();
                            } else if (atomCount == linesInFile) {


                                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                                progressDialog.setTitle("Please wait...");
                                progressDialog.setMessage("Reordering the XYZ file...");
                                progressDialog.setCancelable(false);
                                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();
                                    }
                                });
                                progressDialog.show();

                                new Thread() {
                                    public void run() {

                                        int ColorAtomBorder = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorder.tmp"));
                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorderSelected.tmp"));
//                                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                                        exec("touch " + getFilesDir() + "/Coordinates.tmp");
                                        exec("touch " + getFilesDir() + "/Coordinates.x.tmp");


                                        exec("rm " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                        exec("touch " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                        exec("rm " + getFilesDir() + "/canvas3d/Coordinates.x.tmp");
                                        exec("touch " + getFilesDir() + "/canvas3d/Coordinates.x.tmp");
// in Angstroms, in 0;0, without zoom
                                        exec("mv " + getFilesDir() + "/Coordinates.xyz.tmp " + getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp");
                                        exec("sed -i 1,2d " + getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp");
                                        try {
                                            Scanner scan12 = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp"));
                                            double radius = 0;
                                            int atom_color = 0;
                                            int text_color = 0;
                                            int atom_number = 0;
                                            int atomNumber = 0;
                                            // now in Angstroms
                                            double radius_Ang = 0;

                                            while (scan12.hasNext()) {
                                                atomNumber++;

                                                String curLine12 = scan12.nextLine();
                                                String[] splitted12 = curLine12.split(" ");
                                                String atom12 = splitted12[0].trim();
                                                String x_coord12 = splitted12[1].trim();
                                                String y_coord12 = splitted12[2].trim();
                                                String z_coord12 = splitted12[3].trim();

                                                atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                                try {
                                                    Scanner scanElmnt = new Scanner(new File(getFilesDir() + "/canvas3d/Elmnts.dat"));
                                                    while (scanElmnt.hasNext()) {
                                                        String curLineElmnt = scanElmnt.nextLine();
                                                        String[] splittedElmnt = curLineElmnt.split(" ");
                                                        String elementElmnt = splittedElmnt[0].trim();
                                                        String radiusElmnt = splittedElmnt[1].trim();
                                                        String atom_colorElmnt = splittedElmnt[2].trim();
                                                        String text_colorElmnt = splittedElmnt[3].trim();

                                                        radius = Double.valueOf(radiusElmnt);
                                                        atom_color = Integer.valueOf(atom_colorElmnt);
                                                        text_color = Integer.valueOf(text_colorElmnt);
                                                        radius_Ang = radius / 100;

                                                        if (atom12.equals(elementElmnt)) {

                                                            // write in Angstroms, in 0;0, without zoom
                                                            FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                            outputWriter3.write(elementElmnt + "\t" + x_coord12 + "\t" + y_coord12 + "\t" + z_coord12 + "\t" + radius_Ang + "\t" + atom_color + "\t" + text_color + "\t" + atom_number + "\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                            outputWriter3.close();
                                                        }
                                                    }
                                                    scanElmnt.close();
                                                } catch (FileNotFoundException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            // až tady: (za smyčkou)
                                            scan12.close();
                                            exec("rm " + getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp");
                                            exec("mv " + getFilesDir() + "/Coordinates.x.tmp " + getFilesDir() + "/canvas3d/");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            exec("rm " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                            exec("touch " + getFilesDir() + "/canvas3d/Coordinates.tmp");
//                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                            double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                            double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                            double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                            try {
                                                Scanner scanX = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                                int lineNo1 = 0;
                                                while (scanX.hasNext()) {
                                                    lineNo1++;
                                                    String curLineX = scanX.nextLine();
                                                    String[] splittedX = curLineX.split("\\s");
                                                    String atomX = splittedX[0].trim();
                                                    String x_coordX = splittedX[1].trim();
                                                    String y_coordX = splittedX[2].trim();
                                                    String z_coordX = splittedX[3].trim();
                                                    String radiusX = splittedX[4].trim();
                                                    String atom_colorX = splittedX[5].trim();
                                                    String text_colorX = splittedX[6].trim();
                                                    String atom_numberX = splittedX[7].trim();
                                                    String col_at_borderX = splittedX[8].trim();
                                                    String touch_timeX = splittedX[9].trim();
                                                    int radius_pixX = (int) (Double.valueOf(radiusX) * 100);
                                                    // project 3D geometry to z = 0
                                                    double A = 0;
                                                    double B = 0;
                                                    double C = 1;
                                                    double D = 0;
                                                    double x_projX = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_projX = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_projX = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    // because of canvas - input variables x&y have to be integers, not doubles
                                                    int x_projection = (int) (x_projX * 100);
                                                    int y_projection = (int) (y_projX * 100);
                                                    int z_projection = (int) (z_projX * 100);
                                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                                    double z_textX = Double.valueOf(z_coordX) + ForegroundShiftText;
                                                    // write the file
                                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                    outputWriter_atoms.write(atomX + "\t" + col_at_borderX + "\t" + x_projection + "\t" + y_projection + "\t" + touch_timeX + "\t" + "0" + "\t" + z_coordX + "\t" + radius_pixX + "\t" + atom_colorX + "\t" + atom_numberX + "\t" + "C" + "\n");
                                                    outputWriter_atoms.write(atomX + "\t" + "0" + "\t" + x_projection + "\t" + y_projection + "\t" + "0" + "\t" + "0" + "\t" + z_textX + "\t" + "0" + "\t" + text_colorX + "\t" + atom_numberX + "\t" + "T" + "\n");
                                                    outputWriter_atoms.close();

                                                    // second loop - to reveal the bonds
                                                    Scanner scan2 = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                                    int lineNo2 = 0;
                                                    while (scan2.hasNext()) {
                                                        lineNo2++;
                                                        String curLine2 = scan2.nextLine();
                                                        String[] splitted2 = curLine2.split("\\s");
                                                        String atom2 = splitted2[0].trim();
                                                        String x_coord2 = splitted2[1].trim();
                                                        String y_coord2 = splitted2[2].trim();
                                                        String z_coord2 = splitted2[3].trim();
                                                        String radius2 = splitted2[4].trim();
                                                        String atom_color2 = splitted2[5].trim();
                                                        String text_color2 = splitted2[6].trim();
                                                        String atom_number2 = splitted2[7].trim();
                                                        String col_at_border2 = splitted2[8].trim();
                                                        String touch_time2 = splitted2[9].trim();

                                                        if (lineNo2 >= lineNo1) {
                                                            // investigate all distances
                                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                            double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                                double A2 = 0;
                                                                double B2 = 0;
                                                                double C2 = 1;
                                                                double D2 = 0;
                                                                double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                double x_bond1 = 100 * x_proj1;
                                                                double y_bond1 = 100 * y_proj1;
                                                                double x_bond2 = 100 * x_proj2;
                                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                                int bond_color1 = Integer.valueOf(atom_colorX);
                                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                // write the file
                                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                                outputWriter_bonds.close();
                                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                                if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scan2.close();
                                                }
                                                scanX.close();
                                                exec("mv " + getFilesDir() + "/Coordinates.tmp " + getFilesDir() + "/canvas3d/");
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                            try {
                                                String Z_sort = exec("sort -g -k7 " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                                outputWriter_sort.write(Z_sort);
                                                outputWriter_sort.close();
                                                exec("mv " + getFilesDir() + "/Coordinates.tmp_ " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                            } catch (FileNotFoundException e) {
                                                e.printStackTrace();
                                            } catch (IOException e) {
                                                e.printStackTrace();
                                            }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }

                                        molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                                        onFinish();
                                    }

                                    public void onFinish() {
                                        progressDialog.dismiss();
                                    }
                                }.start();
                            }


                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                        } catch (IOException e) {
//                            e.printStackTrace();
//                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        // get knowledge on number of already existing lines in the file
                        InputStream inputStream = new FileInputStream(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                        LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                        try {
                            lineNumberReader.skip(Long.MAX_VALUE);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        int linesInFile = lineNumberReader.getLineNumber();


                        String AtomNumber = String.valueOf(linesInFile);
                        FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp", MODE_PRIVATE);
                        OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                        outputWriter0.write(AtomNumber);
                        outputWriter0.write("\n");
                        outputWriter0.write("\n");
                        outputWriter0.close();


                        exec("cp " + getFilesDir() + "/canvas3d/Coordinates.tmp " + getFilesDir() + "/canvas3d/Coordinates_reorder.tmp");
                        try {
                            String Z_sort = exec("sort -g -k5 " + getFilesDir() + "/canvas3d/Coordinates_reorder.tmp");
                            FileOutputStream fileout_sort = openFileOutput("Coordinates_reorder.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                            outputWriter_sort.write(Z_sort);
                            outputWriter_sort.close();
                            exec("mv " + getFilesDir() + "/Coordinates_reorder.tmp " + getFilesDir() + "/canvas3d/");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }


                        try {


//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                            double BondScale = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/BondScale.tmp"));
                            double ForegroundShiftBonds = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ForegroundShiftBonds.tmp"));
                            double ForegroundShiftText = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ForegroundShiftText.tmp"));


                            int atomCount = 0;
                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates_reorder.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();

                                    if (typeC.equals("C")) {
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                            while (scan.hasNext()) {
                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split("\\s");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();
                                                String radius = splitted[4].trim();
                                                String atom_color = splitted[5].trim();
                                                String text_color = splitted[6].trim();
                                                String atom_number = splitted[7].trim();
                                                String col_at_border = splitted[8].trim();
                                                String touch_time = splitted[9].trim();

                                                int radius_pix = (int) (Double.valueOf(radius) * 100);

                                                // project 3D geometry to z = 0
                                                double A = 0;
                                                double B = 0;
                                                double C = 1;
                                                double D = 0;
                                                double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                // because of canvas - input variables x&y have to be integers, not doubles
                                                int x_projection = (int) (x_proj * 100);
                                                int y_projection = (int) (y_proj * 100);
                                                int z_projection = (int) (z_proj * 100);

                                                if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected) && (Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                    atomCount++;
                                                    try {
                                                        FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                                        outputWriter.write(atom1C + " " + x_coord + " " + y_coord + " " + z_coord + "\n");
                                                        outputWriter.close();
                                                    } catch (Exception e) {
                                                        e.printStackTrace();
                                                    }
                                                }
                                            }
                                            scan.close();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                scanC.close();

                            } catch (Exception e) {
                                e.printStackTrace();
                            }

//                            Log.println(Log.INFO,"bool=",String.valueOf(measure));
//                            Log.println(Log.INFO,"atomCount=",String.valueOf(atomCount));

                            if (atomCount != linesInFile) {
                                final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                                        .setMessage("Error: select all atoms in the structure.")
                                        .setTitle("Reordering the XYZ file")
                                        .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                                            @Override
                                            public void onClick(DialogInterface dialog, int id) {
//                                                    exec("rm " + getFilesDir() + "/Coordinates.xyz.tmp");
//                                                    int ColorAtomBorder = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorder.tmp"));
//                                                    int ColorAtomBorderSelected = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorderSelected.tmp"));
//                                                    exec("touch " + getFilesDir() + "/Coordinates.tmp");
//
//                                                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                                    progressDialog.setTitle("Please wait...");
//                                                    progressDialog.setMessage("Cancelling the atom selection...");
//                                                    progressDialog.setCancelable(false);
//                                                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                                        @Override
//                                                        public void onClick(DialogInterface dialog, int which) {
//                                                            dialog.dismiss();
//                                                        }
//                                                    });
//                                                    progressDialog.show();
//
//                                                    new Thread() {
//                                                        public void run() {
//
//                                                            try {
//                                                                Scanner scanC = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.tmp"));
//                                                                while (scanC.hasNext()) {
//                                                                    String curLineC = scanC.nextLine();
//                                                                    String[] splittedC = curLineC.split("\\s");
//                                                                    String atom1C = splittedC[0].trim();
//                                                                    String atom2C = splittedC[1].trim();
//                                                                    String x1_projC = splittedC[2].trim();
//                                                                    String y1_projC = splittedC[3].trim();
//                                                                    String x2_projC = splittedC[4].trim();
//                                                                    String y2_projC = splittedC[5].trim();
//                                                                    String z_coordC = splittedC[6].trim();
//                                                                    String radiusC = splittedC[7].trim();
//                                                                    String atom_colorC = splittedC[8].trim();
//                                                                    String atom_numberC = splittedC[9].trim();
//                                                                    String typeC = splittedC[10].trim();
//
//
//                                                                    // write the file
//                                                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
//                                                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
//                                                                    if (typeC.equals("C")) {
//                                                                        if (Integer.valueOf(atom2C) == ColorAtomBorderSelected) {
//                                                                            outputWriter_atoms.write(atom1C + "\t" + ColorAtomBorder + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                                        } else {
//                                                                            outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                                        }
//                                                                    } else {
//                                                                        outputWriter_atoms.write(atom1C + "\t" + atom2C + "\t" + x1_projC + "\t" + y1_projC + "\t" + x2_projC + "\t" + y2_projC + "\t" + z_coordC + "\t" + radiusC + "\t" + atom_colorC + "\t" + atom_numberC + "\t" + typeC + "\n");
//                                                                    }
//                                                                    outputWriter_atoms.close();
//                                                                }
//                                                                scanC.close();
//                                                                exec("mv " + getFilesDir() + "/Coordinates.tmp " + getFilesDir() + "/canvas3d/");
//                                                            } catch (Exception e) {
//                                                                e.printStackTrace();
//                                                            }
//
//                                                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                                            onFinish();
//                                                        }
//
//                                                        public void onFinish() {
//                                                            progressDialog.dismiss();
//                                                        }
//                                                    }.start();
                                            }
                                        })
                                        .create();
                                dialog.show();
                            } else if (atomCount == linesInFile) {


//                                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                                progressDialog.setTitle("Please wait...");
//                                progressDialog.setMessage("Reordering the XYZ file...");
//                                progressDialog.setCancelable(false);
//                                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                                    @Override
//                                    public void onClick(DialogInterface dialog, int which) {
//                                        dialog.dismiss();
//                                    }
//                                });
//                                progressDialog.show();
//
//                                new Thread() {
//                                    public void run() {

//                                        int ColorAtomBorder = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorder.tmp"));
//                                        int ColorAtomBorderSelected = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorderSelected.tmp"));
//                                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                                        exec("touch " + getFilesDir() + "/Coordinates.tmp");
                                        exec("touch " + getFilesDir() + "/Coordinates.x.tmp");


                                        exec("rm " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                        exec("touch " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                        exec("rm " + getFilesDir() + "/canvas3d/Coordinates.x.tmp");
                                        exec("touch " + getFilesDir() + "/canvas3d/Coordinates.x.tmp");
// in Angstroms, in 0;0, without zoom
                                        exec("mv " + getFilesDir() + "/Coordinates.xyz.tmp " + getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp");
                                        exec("sed -i 1,2d " + getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp");
                                        try {
                                            Scanner scan12 = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp"));
                                            double radius = 0;
                                            int atom_color = 0;
                                            int text_color = 0;
                                            int atom_number = 0;
                                            int atomNumber = 0;
                                            // now in Angstroms
                                            double radius_Ang = 0;

                                            while (scan12.hasNext()) {
                                                atomNumber++;

                                                String curLine12 = scan12.nextLine();
                                                String[] splitted12 = curLine12.split(" ");
                                                String atom12 = splitted12[0].trim();
                                                String x_coord12 = splitted12[1].trim();
                                                String y_coord12 = splitted12[2].trim();
                                                String z_coord12 = splitted12[3].trim();

                                                atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                                try {
                                                    Scanner scanElmnt = new Scanner(new File(getFilesDir() + "/canvas3d/Elmnts.dat"));
                                                    while (scanElmnt.hasNext()) {
                                                        String curLineElmnt = scanElmnt.nextLine();
                                                        String[] splittedElmnt = curLineElmnt.split(" ");
                                                        String elementElmnt = splittedElmnt[0].trim();
                                                        String radiusElmnt = splittedElmnt[1].trim();
                                                        String atom_colorElmnt = splittedElmnt[2].trim();
                                                        String text_colorElmnt = splittedElmnt[3].trim();

                                                        radius = Double.valueOf(radiusElmnt);
                                                        atom_color = Integer.valueOf(atom_colorElmnt);
                                                        text_color = Integer.valueOf(text_colorElmnt);
                                                        radius_Ang = radius / 100;

                                                        if (atom12.equals(elementElmnt)) {

                                                            // write in Angstroms, in 0;0, without zoom
                                                            FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                            OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                            outputWriter3.write(elementElmnt + "\t" + x_coord12 + "\t" + y_coord12 + "\t" + z_coord12 + "\t" + radius_Ang + "\t" + atom_color + "\t" + text_color + "\t" + atom_number + "\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                            outputWriter3.close();
                                                        }
                                                    }
                                                    scanElmnt.close();
                                                } catch (FileNotFoundException e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            // až tady: (za smyčkou)
                                            scan12.close();
                                            exec("rm " + getFilesDir() + "/canvas3d/Coordinates_headless.xyz.tmp");
                                            exec("mv " + getFilesDir() + "/Coordinates.x.tmp " + getFilesDir() + "/canvas3d/");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                            exec("rm " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                            exec("touch " + getFilesDir() + "/canvas3d/Coordinates.tmp");
//                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                            double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                            double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                            double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                            double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                            try {
                                                Scanner scanX = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                                int lineNo1 = 0;
                                                while (scanX.hasNext()) {
                                                    lineNo1++;
                                                    String curLineX = scanX.nextLine();
                                                    String[] splittedX = curLineX.split("\\s");
                                                    String atomX = splittedX[0].trim();
                                                    String x_coordX = splittedX[1].trim();
                                                    String y_coordX = splittedX[2].trim();
                                                    String z_coordX = splittedX[3].trim();
                                                    String radiusX = splittedX[4].trim();
                                                    String atom_colorX = splittedX[5].trim();
                                                    String text_colorX = splittedX[6].trim();
                                                    String atom_numberX = splittedX[7].trim();
                                                    String col_at_borderX = splittedX[8].trim();
                                                    String touch_timeX = splittedX[9].trim();
                                                    int radius_pixX = (int) (Double.valueOf(radiusX) * 100);
                                                    // project 3D geometry to z = 0
                                                    double A = 0;
                                                    double B = 0;
                                                    double C = 1;
                                                    double D = 0;
                                                    double x_projX = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_projX = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_projX = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    // because of canvas - input variables x&y have to be integers, not doubles
                                                    int x_projection = (int) (x_projX * 100);
                                                    int y_projection = (int) (y_projX * 100);
                                                    int z_projection = (int) (z_projX * 100);
                                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                                    double z_textX = Double.valueOf(z_coordX) + ForegroundShiftText;
                                                    // write the file
                                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                                    outputWriter_atoms.write(atomX + "\t" + col_at_borderX + "\t" + x_projection + "\t" + y_projection + "\t" + touch_timeX + "\t" + "0" + "\t" + z_coordX + "\t" + radius_pixX + "\t" + atom_colorX + "\t" + atom_numberX + "\t" + "C" + "\n");
                                                    outputWriter_atoms.write(atomX + "\t" + "0" + "\t" + x_projection + "\t" + y_projection + "\t" + "0" + "\t" + "0" + "\t" + z_textX + "\t" + "0" + "\t" + text_colorX + "\t" + atom_numberX + "\t" + "T" + "\n");
                                                    outputWriter_atoms.close();

                                                    // second loop - to reveal the bonds
                                                    Scanner scan2 = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                                    int lineNo2 = 0;
                                                    while (scan2.hasNext()) {
                                                        lineNo2++;
                                                        String curLine2 = scan2.nextLine();
                                                        String[] splitted2 = curLine2.split("\\s");
                                                        String atom2 = splitted2[0].trim();
                                                        String x_coord2 = splitted2[1].trim();
                                                        String y_coord2 = splitted2[2].trim();
                                                        String z_coord2 = splitted2[3].trim();
                                                        String radius2 = splitted2[4].trim();
                                                        String atom_color2 = splitted2[5].trim();
                                                        String text_color2 = splitted2[6].trim();
                                                        String atom_number2 = splitted2[7].trim();
                                                        String col_at_border2 = splitted2[8].trim();
                                                        String touch_time2 = splitted2[9].trim();

                                                        if (lineNo2 >= lineNo1) {
                                                            // investigate all distances
                                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                            double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                                double A2 = 0;
                                                                double B2 = 0;
                                                                double C2 = 1;
                                                                double D2 = 0;
                                                                double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                double x_bond1 = 100 * x_proj1;
                                                                double y_bond1 = 100 * y_proj1;
                                                                double x_bond2 = 100 * x_proj2;
                                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                                int bond_color1 = Integer.valueOf(atom_colorX);
                                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                // write the file
                                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                                outputWriter_bonds.close();
                                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                                if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                                    double A2 = 0;
                                                                    double B2 = 0;
                                                                    double C2 = 1;
                                                                    double D2 = 0;
                                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                                    double x_bond1 = 100 * x_proj1;
                                                                    double y_bond1 = 100 * y_proj1;
                                                                    double x_bond2 = 100 * x_proj2;
                                                                    double y_bond2 = 100 * y_proj2;

                                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                                    // write the file
                                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                                    outputWriter_bonds.close();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scan2.close();
                                                }
                                                scanX.close();
                                                exec("mv " + getFilesDir() + "/Coordinates.tmp " + getFilesDir() + "/canvas3d/");
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                            try {
                                                String Z_sort = exec("sort -g -k7 " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                                outputWriter_sort.write(Z_sort);
                                                outputWriter_sort.close();
                                                exec("mv " + getFilesDir() + "/Coordinates.tmp_ " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                            } catch (FileNotFoundException e) {
                                                e.printStackTrace();
                                            } catch (IOException e) {
                                                e.printStackTrace();
                                            }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }

                                        molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                        onFinish();
//                                    }
//
//                                    public void onFinish() {
//                                        progressDialog.dismiss();
//                                    }
//                                }.start();
                            }


                        } catch (Exception e) {
                            e.printStackTrace();
                        }

//                        } catch (IOException e) {
//                            e.printStackTrace();
//                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }



            }
        };
    }

    private View.OnClickListener replaceButtonClick; {
        replaceButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                exec("touch "+getFilesDir()+"/Coordinates.tmp");

                String Replacement = exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp");

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Replacing the selected atoms...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                            exec("touch "+getFilesDir()+"/Coordinates_headless.xyz.tmp");

                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();
                                    if (typeC.equals("C")) {
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                            while (scan.hasNext()) {
                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split("\\s");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();
                                                String radius = splitted[4].trim();
                                                String atom_color = splitted[5].trim();
                                                String text_color = splitted[6].trim();
                                                String atom_number = splitted[7].trim();
                                                String col_at_border = splitted[8].trim();
                                                String touch_time = splitted[9].trim();

                                                int radius_pix = (int) (Double.valueOf(radius) * 100);

                                                // project 3D geometry to z = 0
                                                double A = 0;
                                                double B = 0;
                                                double C = 1;
                                                double D = 0;
                                                double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                // because of canvas - input variables x&y have to be integers, not doubles
                                                int x_projection = (int) (x_proj * 100);
                                                int y_projection = (int) (y_proj * 100);
                                                int z_projection = (int) (z_proj * 100);

                                                double z_text = (Double.valueOf(z_coord) + ForegroundShiftText);

                                                // write the file
                                                try {
                                                    FileOutputStream fileout_x = openFileOutput("Coordinates_headless.xyz.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_x = new OutputStreamWriter(fileout_x);
                                                    if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        outputWriter_x.write(Replacement + " " + x_coord + " " + y_coord + " " + z_coord + "\n");
                                                    } else if ((Integer.valueOf(atom2C) == ColorAtomBorder)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        outputWriter_x.write(atom1C + " " + x_coord + " " + y_coord + " " + z_coord +"\n");
                                                    }
                                                    outputWriter_x.close();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            scan.close();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                scanC.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates_headless.xyz.tmp "+getFilesDir()+"/canvas3d/");
//                        update12();

                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

                            try {
                                Scanner scan12 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                double radius = 0;
                                int atom_color = 0;
                                int text_color = 0;
                                int atom_number = 0;
                                int atomNumber = 0;
                                // now in Angstroms
                                double radius_Ang = 0;

                                while (scan12.hasNext()) {
                                    atomNumber++;

                                    String curLine12 = scan12.nextLine();
                                    String[] splitted12 = curLine12.split(" ");
                                    String atom12 = splitted12[0].trim();
                                    String x_coord12 = splitted12[1].trim();
                                    String y_coord12 = splitted12[2].trim();
                                    String z_coord12 = splitted12[3].trim();

                                    atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                    try {
                                        Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                        while (scanElmnt.hasNext()) {
                                            String curLineElmnt = scanElmnt.nextLine();
                                            String[] splittedElmnt = curLineElmnt.split(" ");
                                            String elementElmnt = splittedElmnt[0].trim();
                                            String radiusElmnt = splittedElmnt[1].trim();
                                            String atom_colorElmnt = splittedElmnt[2].trim();
                                            String text_colorElmnt = splittedElmnt[3].trim();

                                            radius = Double.valueOf(radiusElmnt);
                                            atom_color = Integer.valueOf(atom_colorElmnt);
                                            text_color = Integer.valueOf(text_colorElmnt);
                                            radius_Ang = radius/100;

                                            if (atom12.equals(elementElmnt)) {

                                                // write in Angstroms, in 0;0, without zoom
                                                FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                outputWriter3.write(elementElmnt +"\t"+x_coord12+"\t"+y_coord12+"\t"+z_coord12+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                outputWriter3.close();
                                            }
                                        }
                                        scanElmnt.close();
                                    } catch (FileNotFoundException e) {
                                        e.printStackTrace();
                                    }
                                }
                                // až tady: (za smyčkou)
                                scan12.close();
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
//                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scanX.hasNext()) {
                                        lineNo1++;
                                        String curLineX = scanX.nextLine();
                                        String[] splittedX = curLineX.split("\\s");
                                        String atomX = splittedX[0].trim();
                                        String x_coordX = splittedX[1].trim();
                                        String y_coordX = splittedX[2].trim();
                                        String z_coordX = splittedX[3].trim();
                                        String radiusX = splittedX[4].trim();
                                        String atom_colorX = splittedX[5].trim();
                                        String text_colorX = splittedX[6].trim();
                                        String atom_numberX = splittedX[7].trim();
                                        String col_at_borderX = splittedX[8].trim();
                                        String touch_timeX = splittedX[9].trim();
                                        int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_projX*100);
                                        int y_projection = (int) (y_projX*100);
                                        int z_projection = (int) (z_projX*100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                        outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted2[8].trim();
                                            String touch_time2 = splitted2[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX)-Double.valueOf(x_coord2)),2)+Math.pow((Double.valueOf(y_coordX)-Double.valueOf(y_coord2)),2)+Math.pow((Double.valueOf(z_coordX)-Double.valueOf(z_coord2)),2));
                                                double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                if((dist_scan1_scan2 < BondingDistance)&&(dist_scan1_scan2 > 0)){

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A*(Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A*(Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A*(Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));

                                                    double x_bond1 = 100*x_proj1;
                                                    double y_bond1 = 100*y_proj1;
                                                    double x_bond2 = 100*x_proj2;
                                                    double y_bond2 = 100*y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_colorX);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5*(Double.valueOf(z_coordX) + Double.valueOf(z_coord2))+ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atomX+"\t"+atom2+"\t"+x_bond1+"\t"+y_bond1+"\t"+x_bond2+"\t"+y_bond2+"\t"+z_bond_average+"\t"+bond_color1+"\t"+bond_color2+"\t"+"0"+"\t"+"L"+"\n");
                                                    outputWriter_bonds.close();
                                                } else if((dist_scan1_scan2 >= BondingDistance)&&(atomX.equals("H")||atom2.equals("H"))) {
                                                    if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scanX.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                            } catch (Exception e) {
                                e.printStackTrace();
                            }


                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Replacing the selected atoms...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                            exec("touch "+getFilesDir()+"/Coordinates_headless.xyz.tmp");

                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();
                                    if (typeC.equals("C")) {
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                            while (scan.hasNext()) {
                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split("\\s");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();
                                                String radius = splitted[4].trim();
                                                String atom_color = splitted[5].trim();
                                                String text_color = splitted[6].trim();
                                                String atom_number = splitted[7].trim();
                                                String col_at_border = splitted[8].trim();
                                                String touch_time = splitted[9].trim();

                                                int radius_pix = (int) (Double.valueOf(radius) * 100);

                                                // project 3D geometry to z = 0
                                                double A = 0;
                                                double B = 0;
                                                double C = 1;
                                                double D = 0;
                                                double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                // because of canvas - input variables x&y have to be integers, not doubles
                                                int x_projection = (int) (x_proj * 100);
                                                int y_projection = (int) (y_proj * 100);
                                                int z_projection = (int) (z_proj * 100);

                                                double z_text = (Double.valueOf(z_coord) + ForegroundShiftText);

                                                // write the file
                                                try {
                                                    FileOutputStream fileout_x = openFileOutput("Coordinates_headless.xyz.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_x = new OutputStreamWriter(fileout_x);
                                                    if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        outputWriter_x.write(Replacement + " " + x_coord + " " + y_coord + " " + z_coord + "\n");
                                                    } else if ((Integer.valueOf(atom2C) == ColorAtomBorder)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        outputWriter_x.write(atom1C + " " + x_coord + " " + y_coord + " " + z_coord +"\n");
                                                    }
                                                    outputWriter_x.close();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            scan.close();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                scanC.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates_headless.xyz.tmp "+getFilesDir()+"/canvas3d/");
//                        update12();

                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

                            try {
                                Scanner scan12 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                double radius = 0;
                                int atom_color = 0;
                                int text_color = 0;
                                int atom_number = 0;
                                int atomNumber = 0;
                                // now in Angstroms
                                double radius_Ang = 0;

                                while (scan12.hasNext()) {
                                    atomNumber++;

                                    String curLine12 = scan12.nextLine();
                                    String[] splitted12 = curLine12.split(" ");
                                    String atom12 = splitted12[0].trim();
                                    String x_coord12 = splitted12[1].trim();
                                    String y_coord12 = splitted12[2].trim();
                                    String z_coord12 = splitted12[3].trim();

                                    atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                    try {
                                        Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                        while (scanElmnt.hasNext()) {
                                            String curLineElmnt = scanElmnt.nextLine();
                                            String[] splittedElmnt = curLineElmnt.split(" ");
                                            String elementElmnt = splittedElmnt[0].trim();
                                            String radiusElmnt = splittedElmnt[1].trim();
                                            String atom_colorElmnt = splittedElmnt[2].trim();
                                            String text_colorElmnt = splittedElmnt[3].trim();

                                            radius = Double.valueOf(radiusElmnt);
                                            atom_color = Integer.valueOf(atom_colorElmnt);
                                            text_color = Integer.valueOf(text_colorElmnt);
                                            radius_Ang = radius/100;

                                            if (atom12.equals(elementElmnt)) {

                                                // write in Angstroms, in 0;0, without zoom
                                                FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                outputWriter3.write(elementElmnt +"\t"+x_coord12+"\t"+y_coord12+"\t"+z_coord12+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                outputWriter3.close();
                                            }
                                        }
                                        scanElmnt.close();
                                    } catch (FileNotFoundException e) {
                                        e.printStackTrace();
                                    }
                                }
                                // až tady: (za smyčkou)
                                scan12.close();
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
//                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scanX.hasNext()) {
                                        lineNo1++;
                                        String curLineX = scanX.nextLine();
                                        String[] splittedX = curLineX.split("\\s");
                                        String atomX = splittedX[0].trim();
                                        String x_coordX = splittedX[1].trim();
                                        String y_coordX = splittedX[2].trim();
                                        String z_coordX = splittedX[3].trim();
                                        String radiusX = splittedX[4].trim();
                                        String atom_colorX = splittedX[5].trim();
                                        String text_colorX = splittedX[6].trim();
                                        String atom_numberX = splittedX[7].trim();
                                        String col_at_borderX = splittedX[8].trim();
                                        String touch_timeX = splittedX[9].trim();
                                        int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_projX*100);
                                        int y_projection = (int) (y_projX*100);
                                        int z_projection = (int) (z_projX*100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                        outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted2[8].trim();
                                            String touch_time2 = splitted2[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX)-Double.valueOf(x_coord2)),2)+Math.pow((Double.valueOf(y_coordX)-Double.valueOf(y_coord2)),2)+Math.pow((Double.valueOf(z_coordX)-Double.valueOf(z_coord2)),2));
                                                double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                if((dist_scan1_scan2 < BondingDistance)&&(dist_scan1_scan2 > 0)){

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A*(Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A*(Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A*(Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));

                                                    double x_bond1 = 100*x_proj1;
                                                    double y_bond1 = 100*y_proj1;
                                                    double x_bond2 = 100*x_proj2;
                                                    double y_bond2 = 100*y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_colorX);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5*(Double.valueOf(z_coordX) + Double.valueOf(z_coord2))+ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atomX+"\t"+atom2+"\t"+x_bond1+"\t"+y_bond1+"\t"+x_bond2+"\t"+y_bond2+"\t"+z_bond_average+"\t"+bond_color1+"\t"+bond_color2+"\t"+"0"+"\t"+"L"+"\n");
                                                    outputWriter_bonds.close();
                                                } else if((dist_scan1_scan2 >= BondingDistance)&&(atomX.equals("H")||atom2.equals("H"))) {
                                                    if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scanX.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                            } catch (Exception e) {
                                e.printStackTrace();
                            }


                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener deleteButtonClick; {
        deleteButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                exec("touch "+getFilesDir()+"/Coordinates.tmp");
                exec("touch "+getFilesDir()+"/Coordinates.x.tmp");

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Deleting the selected atoms...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                            exec("touch "+getFilesDir()+"/Coordinates_headless.xyz.tmp");

                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();
                                    if (typeC.equals("C")) {
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                            while (scan.hasNext()) {
                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split("\\s");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();
                                                String radius = splitted[4].trim();
                                                String atom_color = splitted[5].trim();
                                                String text_color = splitted[6].trim();
                                                String atom_number = splitted[7].trim();
                                                String col_at_border = splitted[8].trim();
                                                String touch_time = splitted[9].trim();

                                                int radius_pix = (int) (Double.valueOf(radius) * 100);

                                                // project 3D geometry to z = 0
                                                double A = 0;
                                                double B = 0;
                                                double C = 1;
                                                double D = 0;
                                                double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                // because of canvas - input variables x&y have to be integers, not doubles
                                                int x_projection = (int) (x_proj * 100);
                                                int y_projection = (int) (y_proj * 100);
                                                int z_projection = (int) (z_proj * 100);

                                                double z_text = (Double.valueOf(z_coord) + ForegroundShiftText);

                                                // write the file
                                                try {
                                                    FileOutputStream fileout_x = openFileOutput("Coordinates_headless.xyz.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_x = new OutputStreamWriter(fileout_x);
                                                    if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        // do nothing - deleted atom
                                                    } else if ((Integer.valueOf(atom2C) == ColorAtomBorder)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        outputWriter_x.write(atom1C + " " + x_coord + " " + y_coord + " " + z_coord +"\n");
                                                    }
                                                    outputWriter_x.close();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            scan.close();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                scanC.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates_headless.xyz.tmp "+getFilesDir()+"/canvas3d/");
//                        update12();

                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

                            try {
                                Scanner scan12 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                double radius = 0;
                                int atom_color = 0;
                                int text_color = 0;
                                int atom_number = 0;
                                int atomNumber = 0;
                                // now in Angstroms
                                double radius_Ang = 0;

                                while (scan12.hasNext()) {
                                    atomNumber++;

                                    String curLine12 = scan12.nextLine();
                                    String[] splitted12 = curLine12.split(" ");
                                    String atom12 = splitted12[0].trim();
                                    String x_coord12 = splitted12[1].trim();
                                    String y_coord12 = splitted12[2].trim();
                                    String z_coord12 = splitted12[3].trim();

                                    atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                    try {
                                        Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                        while (scanElmnt.hasNext()) {
                                            String curLineElmnt = scanElmnt.nextLine();
                                            String[] splittedElmnt = curLineElmnt.split(" ");
                                            String elementElmnt = splittedElmnt[0].trim();
                                            String radiusElmnt = splittedElmnt[1].trim();
                                            String atom_colorElmnt = splittedElmnt[2].trim();
                                            String text_colorElmnt = splittedElmnt[3].trim();

                                            radius = Double.valueOf(radiusElmnt);
                                            atom_color = Integer.valueOf(atom_colorElmnt);
                                            text_color = Integer.valueOf(text_colorElmnt);
                                            radius_Ang = radius/100;

                                            if (atom12.equals(elementElmnt)) {

                                                // write in Angstroms, in 0;0, without zoom
                                                FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                outputWriter3.write(elementElmnt +"\t"+x_coord12+"\t"+y_coord12+"\t"+z_coord12+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                outputWriter3.close();
                                            }
                                        }
                                        scanElmnt.close();
                                    } catch (FileNotFoundException e) {
                                        e.printStackTrace();
                                    }
                                }
                                // až tady: (za smyčkou)
                                scan12.close();
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
//                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scanX.hasNext()) {
                                        lineNo1++;
                                        String curLineX = scanX.nextLine();
                                        String[] splittedX = curLineX.split("\\s");
                                        String atomX = splittedX[0].trim();
                                        String x_coordX = splittedX[1].trim();
                                        String y_coordX = splittedX[2].trim();
                                        String z_coordX = splittedX[3].trim();
                                        String radiusX = splittedX[4].trim();
                                        String atom_colorX = splittedX[5].trim();
                                        String text_colorX = splittedX[6].trim();
                                        String atom_numberX = splittedX[7].trim();
                                        String col_at_borderX = splittedX[8].trim();
                                        String touch_timeX = splittedX[9].trim();
                                        int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_projX*100);
                                        int y_projection = (int) (y_projX*100);
                                        int z_projection = (int) (z_projX*100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                        outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted2[8].trim();
                                            String touch_time2 = splitted2[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_colorX);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                    if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scanX.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Deleting the selected atoms...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
//                            int ColorAtomBorderSelected = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorderSelected.tmp"));
//                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                            exec("touch "+getFilesDir()+"/Coordinates_headless.xyz.tmp");

                            try {
                                Scanner scanC = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.tmp"));
                                while (scanC.hasNext()) {
                                    String curLineC = scanC.nextLine();
                                    String[] splittedC = curLineC.split("\\s");
                                    String atom1C = splittedC[0].trim();
                                    String atom2C = splittedC[1].trim();
                                    String x1_projC = splittedC[2].trim();
                                    String y1_projC = splittedC[3].trim();
                                    String x2_projC = splittedC[4].trim();
                                    String y2_projC = splittedC[5].trim();
                                    String z_coordC = splittedC[6].trim();
                                    String radiusC = splittedC[7].trim();
                                    String atom_colorC = splittedC[8].trim();
                                    String atom_numberC = splittedC[9].trim();
                                    String typeC = splittedC[10].trim();
                                    if (typeC.equals("C")) {
                                        try {
                                            Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));

                                            while (scan.hasNext()) {
                                                String curLine = scan.nextLine();
                                                String[] splitted = curLine.split("\\s");
                                                String atom = splitted[0].trim();
                                                String x_coord = splitted[1].trim();
                                                String y_coord = splitted[2].trim();
                                                String z_coord = splitted[3].trim();
                                                String radius = splitted[4].trim();
                                                String atom_color = splitted[5].trim();
                                                String text_color = splitted[6].trim();
                                                String atom_number = splitted[7].trim();
                                                String col_at_border = splitted[8].trim();
                                                String touch_time = splitted[9].trim();

                                                int radius_pix = (int) (Double.valueOf(radius) * 100);

                                                // project 3D geometry to z = 0
                                                double A = 0;
                                                double B = 0;
                                                double C = 1;
                                                double D = 0;
                                                double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                // because of canvas - input variables x&y have to be integers, not doubles
                                                int x_projection = (int) (x_proj * 100);
                                                int y_projection = (int) (y_proj * 100);
                                                int z_projection = (int) (z_proj * 100);

                                                double z_text = (Double.valueOf(z_coord) + ForegroundShiftText);

                                                // write the file
                                                try {
                                                    FileOutputStream fileout_x = openFileOutput("Coordinates_headless.xyz.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_x = new OutputStreamWriter(fileout_x);
                                                    if ((Integer.valueOf(atom2C) == ColorAtomBorderSelected)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        // do nothing - deleted atom
                                                    } else if ((Integer.valueOf(atom2C) == ColorAtomBorder)&&(Integer.valueOf(atom_numberC) == Integer.valueOf(atom_number))) {
                                                        outputWriter_x.write(atom1C + " " + x_coord + " " + y_coord + " " + z_coord +"\n");
                                                    }
                                                    outputWriter_x.close();
                                                } catch (Exception e) {
                                                    e.printStackTrace();
                                                }
                                            }
                                            scan.close();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                scanC.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates_headless.xyz.tmp "+getFilesDir()+"/canvas3d/");
//                        update12();

                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

                            try {
                                Scanner scan12 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                double radius = 0;
                                int atom_color = 0;
                                int text_color = 0;
                                int atom_number = 0;
                                int atomNumber = 0;
                                // now in Angstroms
                                double radius_Ang = 0;

                                while (scan12.hasNext()) {
                                    atomNumber++;

                                    String curLine12 = scan12.nextLine();
                                    String[] splitted12 = curLine12.split(" ");
                                    String atom12 = splitted12[0].trim();
                                    String x_coord12 = splitted12[1].trim();
                                    String y_coord12 = splitted12[2].trim();
                                    String z_coord12 = splitted12[3].trim();

                                    atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                    try {
                                        Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                        while (scanElmnt.hasNext()) {
                                            String curLineElmnt = scanElmnt.nextLine();
                                            String[] splittedElmnt = curLineElmnt.split(" ");
                                            String elementElmnt = splittedElmnt[0].trim();
                                            String radiusElmnt = splittedElmnt[1].trim();
                                            String atom_colorElmnt = splittedElmnt[2].trim();
                                            String text_colorElmnt = splittedElmnt[3].trim();

                                            radius = Double.valueOf(radiusElmnt);
                                            atom_color = Integer.valueOf(atom_colorElmnt);
                                            text_color = Integer.valueOf(text_colorElmnt);
                                            radius_Ang = radius/100;

                                            if (atom12.equals(elementElmnt)) {

                                                // write in Angstroms, in 0;0, without zoom
                                                FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                outputWriter3.write(elementElmnt +"\t"+x_coord12+"\t"+y_coord12+"\t"+z_coord12+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                outputWriter3.close();
                                            }
                                        }
                                        scanElmnt.close();
                                    } catch (FileNotFoundException e) {
                                        e.printStackTrace();
                                    }
                                }
                                // až tady: (za smyčkou)
                                scan12.close();
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
//                            double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
//                            double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
//                            double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
//                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scanX.hasNext()) {
                                        lineNo1++;
                                        String curLineX = scanX.nextLine();
                                        String[] splittedX = curLineX.split("\\s");
                                        String atomX = splittedX[0].trim();
                                        String x_coordX = splittedX[1].trim();
                                        String y_coordX = splittedX[2].trim();
                                        String z_coordX = splittedX[3].trim();
                                        String radiusX = splittedX[4].trim();
                                        String atom_colorX = splittedX[5].trim();
                                        String text_colorX = splittedX[6].trim();
                                        String atom_numberX = splittedX[7].trim();
                                        String col_at_borderX = splittedX[8].trim();
                                        String touch_timeX = splittedX[9].trim();
                                        int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_projX*100);
                                        int y_projection = (int) (y_projX*100);
                                        int z_projection = (int) (z_projX*100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                        outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted2[8].trim();
                                            String touch_time2 = splitted2[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_colorX);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                    if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scanX.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener undoButtonClick; {
        undoButtonClick = new View.OnClickListener() {
            public void onClick(View v) {
                double BondScale = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat " + getFilesDir() + "/canvas3d/ColorAtomBorder.tmp"));
                String ModeState = exec("cat " + getFilesDir() + "/canvas3d/Mode.tmp");


                // drawing mode
                if (Integer.valueOf(ModeState) > 0) {


                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                        progressDialog.setTitle("Please wait...");
                        progressDialog.setMessage("Deleting the last atom in the XYZ files...");
                        progressDialog.setCancelable(false);
                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        });
                        progressDialog.show();

                        new Thread() {
                            public void run() {

                                try {
// file No. 2
                                    exec("sed -i $d " + getFilesDir() + "/canvas3d/Coordinates.x.tmp");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
// file No. 1
                                exec("rm " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                exec("touch " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scan.hasNext()) {
                                        lineNo1++;
                                        String curLine = scan.nextLine();
                                        String[] splitted = curLine.split("\\s");
                                        String atom = splitted[0].trim();
                                        String x_coord = splitted[1].trim();
                                        String y_coord = splitted[2].trim();
                                        String z_coord = splitted[3].trim();
                                        String radius = splitted[4].trim();
                                        String atom_color = splitted[5].trim();
                                        String text_color = splitted[6].trim();
                                        String atom_number = splitted[7].trim();
                                        String col_at_border = splitted[8].trim();
                                        String touch_time = splitted[9].trim();
                                        int radius_pix = (int) (Double.valueOf(radius) * 100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                        double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                        double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_proj * 100);
                                        int y_projection = (int) (y_proj * 100);
                                        int z_projection = (int) (z_proj * 100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_text = Double.valueOf(z_coord) + ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atom + "\t" + col_at_border + "\t" + x_projection + "\t" + y_projection + "\t" + touch_time + "\t" + "0" + "\t" + z_coord + "\t" + radius_pix + "\t" + atom_color + "\t" + atom_number + "\t" + "C" + "\n");
                                        outputWriter_atoms.write(atom + "\t" + "0" + "\t" + x_projection + "\t" + y_projection + "\t" + "0" + "\t" + "0" + "\t" + z_text + "\t" + "0" + "\t" + text_color + "\t" + atom_number + "\t" + "T" + "\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted[8].trim();
                                            String touch_time2 = splitted[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                                if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                    if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scan.close();
                                    exec("mv " + getFilesDir() + "/Coordinates.tmp " + getFilesDir() + "/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv " + getFilesDir() + "/Coordinates.tmp_ " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }


                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                                onFinish();
                            }

                            public void onFinish() {
                                progressDialog.dismiss();
                            }
                        }.start();
                    } else {
//                        ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                        progressDialog.setTitle("Please wait...");
//                        progressDialog.setMessage("Deleting the last atom in the XYZ files...");
//                        progressDialog.setCancelable(false);
//                        progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                            @Override
//                            public void onClick(DialogInterface dialog, int which) {
//                                dialog.dismiss();
//                            }
//                        });
//                        progressDialog.show();
//
//                        new Thread() {
//                            public void run() {

                                try {
// file No. 2
                                    exec("sed -i $d " + getFilesDir() + "/canvas3d/Coordinates.x.tmp");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
// file No. 1
                                exec("rm " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                exec("touch " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scan = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scan.hasNext()) {
                                        lineNo1++;
                                        String curLine = scan.nextLine();
                                        String[] splitted = curLine.split("\\s");
                                        String atom = splitted[0].trim();
                                        String x_coord = splitted[1].trim();
                                        String y_coord = splitted[2].trim();
                                        String z_coord = splitted[3].trim();
                                        String radius = splitted[4].trim();
                                        String atom_color = splitted[5].trim();
                                        String text_color = splitted[6].trim();
                                        String atom_number = splitted[7].trim();
                                        String col_at_border = splitted[8].trim();
                                        String touch_time = splitted[9].trim();
                                        int radius_pix = (int) (Double.valueOf(radius) * 100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_proj = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                        double y_proj = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                        double z_proj = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_proj * 100);
                                        int y_projection = (int) (y_proj * 100);
                                        int z_projection = (int) (z_proj * 100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_text = Double.valueOf(z_coord) + ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atom + "\t" + col_at_border + "\t" + x_projection + "\t" + y_projection + "\t" + touch_time + "\t" + "0" + "\t" + z_coord + "\t" + radius_pix + "\t" + atom_color + "\t" + atom_number + "\t" + "C" + "\n");
                                        outputWriter_atoms.write(atom + "\t" + "0" + "\t" + x_projection + "\t" + y_projection + "\t" + "0" + "\t" + "0" + "\t" + z_text + "\t" + "0" + "\t" + text_color + "\t" + atom_number + "\t" + "T" + "\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir() + "/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted[8].trim();
                                            String touch_time2 = splitted[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                                if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                    if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scan.close();
                                    exec("mv " + getFilesDir() + "/Coordinates.tmp " + getFilesDir() + "/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv " + getFilesDir() + "/Coordinates.tmp_ " + getFilesDir() + "/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }


                                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                                onFinish();
//                            }
//
//                            public void onFinish() {
//                                progressDialog.dismiss();
//                            }
//                        }.start();
                    }


                } else {
                    final AlertDialog dialog = new AlertDialog.Builder(Canvas3d_main.this)
                .setMessage("Deleting last lines in XYZ files is supported in drawing mode only.")
                .setTitle("Error")
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int id) {

                    }
                })
                .create();
        dialog.show();
                }
            }
        };
    }

    private View.OnClickListener rotateXClick; {
        rotateXClick = new View.OnClickListener() {
            public void onClick(View v) {
                String RotAngle = exec("cat "+getFilesDir()+"/canvas3d/RotAngle.tmp");
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double theta = Double.valueOf(RotAngle);
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Rotating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig*Math.cos(theta) - z_orig*Math.sin(theta);
                                    double z_new = y_orig*Math.sin(theta) + z_orig*Math.cos(theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();



                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));
                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }



                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Rotating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig*Math.cos(theta) - z_orig*Math.sin(theta);
                                    double z_new = y_orig*Math.sin(theta) + z_orig*Math.cos(theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();



                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));
                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }



                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener unrotateXClick; {
        unrotateXClick = new View.OnClickListener() {
            public void onClick(View v) {
                String RotAngle = exec("cat "+getFilesDir()+"/canvas3d/RotAngle.tmp");
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double theta = Double.valueOf(RotAngle);
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Rotating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig*Math.cos(-theta) - z_orig*Math.sin(-theta);
                                    double z_new = y_orig*Math.sin(-theta) + z_orig*Math.cos(-theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();



                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));
                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Rotating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig*Math.cos(-theta) - z_orig*Math.sin(-theta);
                                    double z_new = y_orig*Math.sin(-theta) + z_orig*Math.cos(-theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();



                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));
                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener rotateYClick; {
        rotateYClick = new View.OnClickListener() {
            public void onClick(View v) {
                String RotAngle = exec("cat "+getFilesDir()+"/canvas3d/RotAngle.tmp");
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double theta = Double.valueOf(RotAngle);
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Rotating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(theta) + z_orig*Math.sin(theta);
                                    double y_new = y_orig;
                                    double z_new = -x_orig*Math.sin(theta) + z_orig*Math.cos(theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();



                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));
                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Rotating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(theta) + z_orig*Math.sin(theta);
                                    double y_new = y_orig;
                                    double z_new = -x_orig*Math.sin(theta) + z_orig*Math.cos(theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();



                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));
                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener unrotateYClick; {
        unrotateYClick = new View.OnClickListener() {
            public void onClick(View v) {
                String RotAngle = exec("cat "+getFilesDir()+"/canvas3d/RotAngle.tmp");
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double theta = Double.valueOf(RotAngle);
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Rotating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(-theta) + z_orig*Math.sin(-theta);
                                    double y_new = y_orig;
                                    double z_new = -x_orig*Math.sin(-theta) + z_orig*Math.cos(-theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Rotating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(-theta) + z_orig*Math.sin(-theta);
                                    double y_new = y_orig;
                                    double z_new = -x_orig*Math.sin(-theta) + z_orig*Math.cos(-theta);
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener rotateZClick; {
        rotateZClick = new View.OnClickListener() {
            public void onClick(View v) {
                String RotAngle = exec("cat "+getFilesDir()+"/canvas3d/RotAngle.tmp");
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double theta = Double.valueOf(RotAngle);
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Rotating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(theta) - y_orig*Math.sin(theta);
                                    double y_new = x_orig*Math.sin(theta) + y_orig*Math.cos(theta);
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Rotating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(theta) - y_orig*Math.sin(theta);
                                    double y_new = x_orig*Math.sin(theta) + y_orig*Math.cos(theta);
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener unrotateZClick; {
        unrotateZClick = new View.OnClickListener() {
            public void onClick(View v) {
                String RotAngle = exec("cat "+getFilesDir()+"/canvas3d/RotAngle.tmp");
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double theta = Double.valueOf(RotAngle);
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Rotating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(-theta) - y_orig*Math.sin(-theta);
                                    double y_new = x_orig*Math.sin(-theta) + y_orig*Math.cos(-theta);
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Rotating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig*Math.cos(-theta) - y_orig*Math.sin(-theta);
                                    double y_new = x_orig*Math.sin(-theta) + y_orig*Math.cos(-theta);
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener translateXClick; {
        translateXClick = new View.OnClickListener() {
            public void onClick(View v) {
                double transl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Transl.tmp"));
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Translating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig + transl;
                                    double y_new = y_orig;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Translating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig + transl;
                                    double y_new = y_orig;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener untranslateXClick; {
        untranslateXClick = new View.OnClickListener() {
            public void onClick(View v) {
                double transl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Transl.tmp"));
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Translating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig - transl;
                                    double y_new = y_orig;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Translating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig - transl;
                                    double y_new = y_orig;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener translateYClick; {
        translateYClick = new View.OnClickListener() {
            public void onClick(View v) {
                double transl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Transl.tmp"));
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Translating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig + transl;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Translating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig + transl;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener untranslateYClick; {
        untranslateYClick = new View.OnClickListener() {
            public void onClick(View v) {
                double transl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Transl.tmp"));
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Translating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig - transl;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Translating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig - transl;
                                    double z_new = z_orig;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener translateZClick; {
        translateZClick = new View.OnClickListener() {
            public void onClick(View v) {
                double transl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Transl.tmp"));
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Translating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig;
                                    double z_new = z_orig + transl;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Translating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig;
                                    double z_new = z_orig + transl;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener untranslateZClick; {
        untranslateZClick = new View.OnClickListener() {
            public void onClick(View v) {
                double transl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Transl.tmp"));
                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));
                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Translating the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig;
                                    double z_new = z_orig - transl;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Translating the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
// file No. 2
                                while (scan2.hasNext()) {
                                    String curLine = scan2.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();

                                    double x_orig = Double.valueOf(x_coord);
                                    double y_orig = Double.valueOf(y_coord);
                                    double z_orig = Double.valueOf(z_coord);

                                    double x_new = x_orig;
                                    double y_new = y_orig;
                                    double z_new = z_orig - transl;
                                    // write the file
                                    FileOutputStream fileout = openFileOutput("Coordinates.x.tmp_", MODE_APPEND);
                                    OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                    outputWriter.write(atom+"\t"+x_new+"\t"+y_new+"\t"+z_new+"\t"+radius+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+col_at_border+"\t"+touch_time+"\n");
                                    outputWriter.close();
                                }
                                scan2.close();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Coordinates.x.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
// file No. 1
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                int lineNo1 = 0;
                                while (scan.hasNext()) {
                                    lineNo1++;
                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split("\\s");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();
                                    String radius = splitted[4].trim();
                                    String atom_color = splitted[5].trim();
                                    String text_color = splitted[6].trim();
                                    String atom_number = splitted[7].trim();
                                    String col_at_border = splitted[8].trim();
                                    String touch_time = splitted[9].trim();
                                    int radius_pix = (int) (Double.valueOf(radius)*100);
                                    // project 3D geometry to z = 0
                                    double A = 0;
                                    double B = 0;
                                    double C = 1;
                                    double D = 0;
                                    double x_proj = Double.valueOf(x_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double y_proj = Double.valueOf(y_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    double z_proj = Double.valueOf(z_coord) - A*(Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                    // because of canvas - input variables x&y have to be integers, not doubles
                                    int x_projection = (int) (x_proj*100);
                                    int y_projection = (int) (y_proj*100);
                                    int z_projection = (int) (z_proj*100);
                                    // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                    double z_text = Double.valueOf(z_coord)+ForegroundShiftText;
                                    // write the file
                                    FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                    OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                    outputWriter_atoms.write(atom+"\t"+col_at_border+"\t"+x_projection+"\t"+y_projection+"\t"+touch_time+"\t"+"0"+"\t"+z_coord+"\t"+radius_pix+"\t"+atom_color+"\t"+atom_number+"\t"+"C"+"\n");
                                    outputWriter_atoms.write(atom+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_text+"\t"+"0"+"\t"+text_color+"\t"+atom_number+"\t"+"T"+"\n");
                                    outputWriter_atoms.close();

                                    // second loop - to reveal the bonds
                                    Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo2 = 0;
                                    while (scan2.hasNext()) {
                                        lineNo2++;
                                        String curLine2 = scan2.nextLine();
                                        String[] splitted2 = curLine2.split("\\s");
                                        String atom2 = splitted2[0].trim();
                                        String x_coord2 = splitted2[1].trim();
                                        String y_coord2 = splitted2[2].trim();
                                        String z_coord2 = splitted2[3].trim();
                                        String radius2 = splitted2[4].trim();
                                        String atom_color2 = splitted2[5].trim();
                                        String text_color2 = splitted2[6].trim();
                                        String atom_number2 = splitted2[7].trim();
                                        String col_at_border2 = splitted[8].trim();
                                        String touch_time2 = splitted[9].trim();

                                        if (lineNo2 >= lineNo1) {
                                            double BondingDistance = BondScale * (Double.valueOf(radius) + Double.valueOf(radius2));

                                            // investigate all distances
                                            double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coord) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coord) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coord) - Double.valueOf(z_coord2)), 2));

                                            if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                double A2 = 0;
                                                double B2 = 0;
                                                double C2 = 1;
                                                double D2 = 0;
                                                double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                double x_bond1 = 100 * x_proj1;
                                                double y_bond1 = 100 * y_proj1;
                                                double x_bond2 = 100 * x_proj2;
                                                double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                int bond_color1 = Integer.valueOf(atom_color);
                                                int bond_color2 = Integer.valueOf(atom_color2);

                                                // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                // write the file
                                                FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                outputWriter_bonds.close();
                                            } else if ((dist_scan1_scan2 >= BondingDistance) && (atom.equals("H") || atom2.equals("H"))) {
                                                if (((atom.equals("H") && atom2.equals("N")) || ((atom.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("O")) || ((atom.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("F")) || ((atom.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if (((atom.equals("H") && atom2.equals("Cl")) || ((atom.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coord) - A * (Double.valueOf(x_coord) * A + Double.valueOf(y_coord) * B + Double.valueOf(z_coord) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

                                                    int bond_color1 = Integer.valueOf(atom_color);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coord) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atom + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                    outputWriter_bonds.close();
                                                }
                                            }
                                        }
                                    }
                                    scan2.close();
                                }
                                scan.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                            try {
                                String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                outputWriter_sort.write(Z_sort);
                                outputWriter_sort.close();
                                exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener zoomClick; {
        zoomClick = new View.OnClickListener() {
            public void onClick(View v) {
                double ZoomExtent = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Zoom.tmp"));
                double ZoomStep = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ZoomStep.tmp"));
                double newZoomExtent = ZoomExtent+ZoomStep;


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Zooming the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                FileOutputStream fileout = openFileOutput("Zoom.tmp", MODE_PRIVATE);
                                OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                outputWriter.write(String.valueOf(newZoomExtent));
                                outputWriter.close();
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Zoom.tmp "+getFilesDir()+"/canvas3d/");

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Zooming the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            try {
                                FileOutputStream fileout = openFileOutput("Zoom.tmp", MODE_PRIVATE);
                                OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                outputWriter.write(String.valueOf(newZoomExtent));
                                outputWriter.close();
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Zoom.tmp "+getFilesDir()+"/canvas3d/");

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener unzoomClick; {
        unzoomClick = new View.OnClickListener() {
            public void onClick(View v) {
                double ZoomExtent = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/Zoom.tmp"));
                double ZoomStep = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ZoomStep.tmp"));
                double newZoomExtent = ZoomExtent-ZoomStep;


                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Unzooming the structure...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            try {
                                FileOutputStream fileout = openFileOutput("Zoom.tmp", MODE_PRIVATE);
                                OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                outputWriter.write(String.valueOf(newZoomExtent));
                                outputWriter.close();
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Zoom.tmp "+getFilesDir()+"/canvas3d/");

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Unzooming the structure...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();

//                    new Thread() {
//                        public void run() {

                            try {
                                FileOutputStream fileout = openFileOutput("Zoom.tmp", MODE_PRIVATE);
                                OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                outputWriter.write(String.valueOf(newZoomExtent));
                                outputWriter.close();
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            exec("mv "+getFilesDir()+"/Zoom.tmp "+getFilesDir()+"/canvas3d/");

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }

    private View.OnClickListener atomLabelClick; {
        atomLabelClick = new View.OnClickListener() {
            public void onClick(View v) {
                final String AtomLabelState = exec("cat "+getFilesDir()+"/canvas3d/AtomLabel.tmp");


                // create another file to allow two conditions independently for the first file
                if (Integer.valueOf(AtomLabelState) == 1){
                    try {
                        FileOutputStream fileout = openFileOutput("AtomLabel.tmp_", MODE_PRIVATE);
                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                        outputWriter.write("2");
                        outputWriter.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    atomLabel.setText("Z-coords");
                } else if (Integer.valueOf(AtomLabelState) == 2){
                    try {
                        FileOutputStream fileout = openFileOutput("AtomLabel.tmp_", MODE_PRIVATE);
                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                        outputWriter.write("0");
                        outputWriter.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    atomLabel.setText("Labels off");
                } else if (Integer.valueOf(AtomLabelState) == 0){
                    try {
                        FileOutputStream fileout = openFileOutput("AtomLabel.tmp_", MODE_PRIVATE);
                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                        outputWriter.write("1");
                        outputWriter.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    atomLabel.setText("Labels on");
                }
                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                // do not remove - otherwise none of the two files will be present any more
//                exec("rm "+getFilesDir()+"/AtomLabel.tmp");
                exec("mv "+getFilesDir()+"/AtomLabel.tmp_ "+getFilesDir()+"/canvas3d/AtomLabel.tmp");
            }
        };
    }

    private View.OnClickListener modeClick; {
        modeClick = new View.OnClickListener() {
            public void onClick(View v) {
                final String ModeState = exec("cat "+getFilesDir()+"/canvas3d/Mode.tmp");

                // create another file to allow two conditions independently for the first file
                if (Integer.valueOf(ModeState) == 1){
                    try {
                        FileOutputStream fileout = openFileOutput("Mode.tmp_", MODE_PRIVATE);
                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                        outputWriter.write("0");
                        outputWriter.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    mode.setText("Select");
                } else if (Integer.valueOf(ModeState) == 0){
                    try {
                        FileOutputStream fileout = openFileOutput("Mode.tmp_", MODE_PRIVATE);
                        OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                        outputWriter.write("1");
                        outputWriter.close();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    mode.setText("Draw");
//                    exec("rm "+getFilesDir()+"/CursorPos.tmp");
//                    exec("touch "+getFilesDir()+"/CursorPos.tmp");
//                    CursorDisplay(exec("rm "+getFilesDir()+"/CursorPos.tmp"));
                }
                // not necessary here:
//                molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                // do not remove - otherwise none of the two files will be present any more
//                exec("rm "+getFilesDir()+"/Mode.tmp");
                exec("mv "+getFilesDir()+"/Mode.tmp_ "+getFilesDir()+"/canvas3d/Mode.tmp");
            }
        };
    }

    private View.OnClickListener clearClick; {
        clearClick = new View.OnClickListener() {
            public void onClick(View v) {

                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                    progressDialog.setTitle("Please wait...");
                    progressDialog.setMessage("Cleaning the 3D canvas...");
                    progressDialog.setCancelable(false);
                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    progressDialog.show();

                    new Thread() {
                        public void run() {

                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                            onFinish();
                        }
                        public void onFinish() {
                            progressDialog.dismiss();
                        }
                    }.start();
                } else {
//                    ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                    progressDialog.setTitle("Please wait...");
//                    progressDialog.setMessage("Cleaning the 3D canvas...");
//                    progressDialog.setCancelable(false);
//                    progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                        @Override
//                        public void onClick(DialogInterface dialog, int which) {
//                            dialog.dismiss();
//                        }
//                    });
//                    progressDialog.show();
//
//                    new Thread() {
//                        public void run() {

                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");

                            molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                            onFinish();
//                        }
//                        public void onFinish() {
//                            progressDialog.dismiss();
//                        }
//                    }.start();
                }


            }
        };
    }


    private View.OnClickListener importXYZClick;

    {
        importXYZClick = new View.OnClickListener() {
            public void onClick(View v) {
                // TODO Auto-generated method stub //
                read(getApplicationContext());
// all the other has to be inside of onActivityResult - otherwise it starts to work with (at the moment) non-existent file before loading it
            }
        };
    }

    private View.OnClickListener exportXYZClick; {
        exportXYZClick = new View.OnClickListener() {
            public void onClick(View v) {
                // TODO Auto-generated method stub //
                write(getApplicationContext());
            }
        };
    }

    private void read(Context context) {
        Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("text/plain");
        startActivityForResult(intent, READ_FILE);
    }

    private void write(Context context) {
        Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("text/plain");
        intent.putExtra(Intent.EXTRA_TITLE,"MyInputFile");
        startActivityForResult(intent, CREATE_FILE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == READ_FILE && data != null) {


            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                progressDialog.setTitle("Please wait...");
                progressDialog.setMessage("Importing the structure...");
                progressDialog.setCancelable(false);
                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                progressDialog.show();

                new Thread() {
                    public void run() {


                        try {
                            documentUri1 = data.getData();
                            String myData = "";
                            ParcelFileDescriptor pfd = getContentResolver().openFileDescriptor(data.getData(), "r");
                            FileInputStream fileInputStream = new FileInputStream(pfd.getFileDescriptor());
                            DataInputStream inp = new DataInputStream(fileInputStream);
                            BufferedReader br = new BufferedReader(new InputStreamReader(inp));
                            String strLine;
                            while ((strLine = br.readLine()) != null) {
                                myData = myData + strLine + "\n";
                            }
                            inp.close();

                            // content of the XYZ file may contain spaces, tabs in any number and combination
//                while (myData.contains("\\s\\s")){  //2 spaces
//                    myData = myData.replace("\\s\\s", " "); //(2 spaces, 1 space)
//                }
                            while (myData.contains("\t")){  //2 spaces
                                myData = myData.replace("\t", " "); //(2 spaces, 1 space)
                            }
                            while (myData.contains("  ")){  //2 spaces
                                myData = myData.replace("  ", " "); //(2 spaces, 1 space)
                            }
                            while (myData.contains("\n ")){  //2 spaces
                                myData = myData.replace("\n ", "\n"); //(2 spaces, 1 space)
                            }

                            FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                            outputWriter.write(myData);
                            outputWriter.close();
                            fileInputStream.close();
                            pfd.close();


                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));

                            // in Angstroms, in 0;0, without zoom
                            exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                            exec("sed -i 1,2d "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                double radius = 0;
                                int atom_color = 0;
                                int text_color = 0;
                                int atom_number = 0;
                                int atomNumber = 0;
                                // now in Angstroms
                                double radius_Ang = 0;

                                while (scan.hasNext()) {
                                    atomNumber++;

                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split(" ");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();

                                    atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                    try {
                                        Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                        while (scanElmnt.hasNext()) {
                                            String curLineElmnt = scanElmnt.nextLine();
                                            String[] splittedElmnt = curLineElmnt.split(" ");
                                            String elementElmnt = splittedElmnt[0].trim();
                                            String radiusElmnt = splittedElmnt[1].trim();
                                            String atom_colorElmnt = splittedElmnt[2].trim();
                                            String text_colorElmnt = splittedElmnt[3].trim();

                                            radius = Double.valueOf(radiusElmnt);
                                            atom_color = Integer.valueOf(atom_colorElmnt);
                                            text_color = Integer.valueOf(text_colorElmnt);
                                            radius_Ang = radius/100;

                                            if (atom.equals(elementElmnt)) {

                                                // write in Angstroms, in 0;0, without zoom
                                                FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                outputWriter3.write(elementElmnt +"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                outputWriter3.close();
                                            }
                                        }
                                        scanElmnt.close();
                                    } catch (FileNotFoundException e) {
                                        e.printStackTrace();
                                    }
                                }
                                // až tady: (za smyčkou)
                                scan.close();
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scanX.hasNext()) {
                                        lineNo1++;
                                        String curLineX = scanX.nextLine();
                                        String[] splittedX = curLineX.split("\\s");
                                        String atomX = splittedX[0].trim();
                                        String x_coordX = splittedX[1].trim();
                                        String y_coordX = splittedX[2].trim();
                                        String z_coordX = splittedX[3].trim();
                                        String radiusX = splittedX[4].trim();
                                        String atom_colorX = splittedX[5].trim();
                                        String text_colorX = splittedX[6].trim();
                                        String atom_numberX = splittedX[7].trim();
                                        String col_at_borderX = splittedX[8].trim();
                                        String touch_timeX = splittedX[9].trim();
                                        int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_projX*100);
                                        int y_projection = (int) (y_projX*100);
                                        int z_projection = (int) (z_projX*100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                        outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted2[8].trim();
                                            String touch_time2 = splitted2[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_colorX);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                    if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scan.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                            Toast.makeText(getApplicationContext(), "File not read", Toast.LENGTH_SHORT).show();
                        }


                        molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                        onFinish();
                    }
                    public void onFinish() {
                        progressDialog.dismiss();
                    }
                }.start();
            } else {
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Importing the structure...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();
//
//                new Thread() {
//                    public void run() {


                        try {
                            documentUri1 = data.getData();
                            String myData = "";
                            ParcelFileDescriptor pfd = getContentResolver().openFileDescriptor(data.getData(), "r");
                            FileInputStream fileInputStream = new FileInputStream(pfd.getFileDescriptor());
                            DataInputStream inp = new DataInputStream(fileInputStream);
                            BufferedReader br = new BufferedReader(new InputStreamReader(inp));
                            String strLine;
                            while ((strLine = br.readLine()) != null) {
                                myData = myData + strLine + "\n";
                            }
                            inp.close();

                            // content of the XYZ file may contain spaces, tabs in any number and combination
//                while (myData.contains("\\s\\s")){  //2 spaces
//                    myData = myData.replace("\\s\\s", " "); //(2 spaces, 1 space)
//                }
                            while (myData.contains("\t")){  //2 spaces
                                myData = myData.replace("\t", " "); //(2 spaces, 1 space)
                            }
                            while (myData.contains("  ")){  //2 spaces
                                myData = myData.replace("  ", " "); //(2 spaces, 1 space)
                            }
                            while (myData.contains("\n ")){  //2 spaces
                                myData = myData.replace("\n ", "\n"); //(2 spaces, 1 space)
                            }

                            FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp", MODE_PRIVATE);
                            OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                            outputWriter.write(myData);
                            outputWriter.close();
                            fileInputStream.close();
                            pfd.close();


                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                            exec("rm "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            exec("touch "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");
                            int ColorAtomBorder = Integer.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ColorAtomBorder.tmp"));

                            // in Angstroms, in 0;0, without zoom
                            exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                            exec("sed -i 1,2d "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                            try {
                                Scanner scan = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp"));
                                double radius = 0;
                                int atom_color = 0;
                                int text_color = 0;
                                int atom_number = 0;
                                int atomNumber = 0;
                                // now in Angstroms
                                double radius_Ang = 0;

                                while (scan.hasNext()) {
                                    atomNumber++;

                                    String curLine = scan.nextLine();
                                    String[] splitted = curLine.split(" ");
                                    String atom = splitted[0].trim();
                                    String x_coord = splitted[1].trim();
                                    String y_coord = splitted[2].trim();
                                    String z_coord = splitted[3].trim();

                                    atom_number = atomNumber;

//                        Log.println(Log.INFO, "atom = ", atom);

                                    try {
                                        Scanner scanElmnt = new Scanner(new File(getFilesDir()+"/canvas3d/Elmnts.dat"));
                                        while (scanElmnt.hasNext()) {
                                            String curLineElmnt = scanElmnt.nextLine();
                                            String[] splittedElmnt = curLineElmnt.split(" ");
                                            String elementElmnt = splittedElmnt[0].trim();
                                            String radiusElmnt = splittedElmnt[1].trim();
                                            String atom_colorElmnt = splittedElmnt[2].trim();
                                            String text_colorElmnt = splittedElmnt[3].trim();

                                            radius = Double.valueOf(radiusElmnt);
                                            atom_color = Integer.valueOf(atom_colorElmnt);
                                            text_color = Integer.valueOf(text_colorElmnt);
                                            radius_Ang = radius/100;

                                            if (atom.equals(elementElmnt)) {

                                                // write in Angstroms, in 0;0, without zoom
                                                FileOutputStream fileout3 = openFileOutput("Coordinates.x.tmp", MODE_APPEND);
                                                OutputStreamWriter outputWriter3 = new OutputStreamWriter(fileout3);
                                                outputWriter3.write(elementElmnt +"\t"+x_coord+"\t"+y_coord+"\t"+z_coord+"\t"+radius_Ang+"\t"+atom_color+"\t"+text_color+"\t"+atom_number+"\t"+ColorAtomBorder+"\t"+"0"+"\n");
                                                outputWriter3.close();
                                            }
                                        }
                                        scanElmnt.close();
                                    } catch (FileNotFoundException e) {
                                        e.printStackTrace();
                                    }
                                }
                                // až tady: (za smyčkou)
                                scan.close();
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates_headless.xyz.tmp");
                                exec("mv "+getFilesDir()+"/Coordinates.x.tmp "+getFilesDir()+"/canvas3d/Coordinates.x.tmp");

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                exec("rm "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                exec("touch "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                double BondScale = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/BondScale.tmp"));
                                double ForegroundShiftBonds = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftBonds.tmp"));
                                double ForegroundShiftText = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/ForegroundShiftText.tmp"));
                                double h_bond_limit_HN = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHN.tmp"));
                                double h_bond_limit_HO = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHO.tmp"));
                                double h_bond_limit_HF = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHF.tmp"));
                                double h_bond_limit_HCl = Double.valueOf(exec("cat "+getFilesDir()+"/canvas3d/HBondHCl.tmp"));
                                try {
                                    Scanner scanX = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                    int lineNo1 = 0;
                                    while (scanX.hasNext()) {
                                        lineNo1++;
                                        String curLineX = scanX.nextLine();
                                        String[] splittedX = curLineX.split("\\s");
                                        String atomX = splittedX[0].trim();
                                        String x_coordX = splittedX[1].trim();
                                        String y_coordX = splittedX[2].trim();
                                        String z_coordX = splittedX[3].trim();
                                        String radiusX = splittedX[4].trim();
                                        String atom_colorX = splittedX[5].trim();
                                        String text_colorX = splittedX[6].trim();
                                        String atom_numberX = splittedX[7].trim();
                                        String col_at_borderX = splittedX[8].trim();
                                        String touch_timeX = splittedX[9].trim();
                                        int radius_pixX = (int) (Double.valueOf(radiusX)*100);
                                        // project 3D geometry to z = 0
                                        double A = 0;
                                        double B = 0;
                                        double C = 1;
                                        double D = 0;
                                        double x_projX = Double.valueOf(x_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double y_projX = Double.valueOf(y_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        double z_projX = Double.valueOf(z_coordX) - A*(Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C)/(Math.pow(A, 2)+Math.pow(B, 2)+Math.pow(C, 2));
                                        // because of canvas - input variables x&y have to be integers, not doubles
                                        int x_projection = (int) (x_projX*100);
                                        int y_projection = (int) (y_projX*100);
                                        int z_projection = (int) (z_projX*100);
                                        // text in front of circles = with less negative z coord
//                        double z_text = 100*(Double.valueOf(z_coord)+0.01);
                                        double z_textX = Double.valueOf(z_coordX)+ForegroundShiftText;
                                        // write the file
                                        FileOutputStream fileout_atoms = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                        OutputStreamWriter outputWriter_atoms = new OutputStreamWriter(fileout_atoms);
                                        outputWriter_atoms.write(atomX+"\t"+col_at_borderX+"\t"+x_projection+"\t"+y_projection+"\t"+touch_timeX+"\t"+"0"+"\t"+z_coordX+"\t"+radius_pixX+"\t"+atom_colorX+"\t"+atom_numberX+"\t"+"C"+"\n");
                                        outputWriter_atoms.write(atomX+"\t"+"0"+"\t"+x_projection+"\t"+y_projection+"\t"+"0"+"\t"+"0"+"\t"+z_textX+"\t"+"0"+"\t"+text_colorX+"\t"+atom_numberX+"\t"+"T"+"\n");
                                        outputWriter_atoms.close();

                                        // second loop - to reveal the bonds
                                        Scanner scan2 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                                        int lineNo2 = 0;
                                        while (scan2.hasNext()) {
                                            lineNo2++;
                                            String curLine2 = scan2.nextLine();
                                            String[] splitted2 = curLine2.split("\\s");
                                            String atom2 = splitted2[0].trim();
                                            String x_coord2 = splitted2[1].trim();
                                            String y_coord2 = splitted2[2].trim();
                                            String z_coord2 = splitted2[3].trim();
                                            String radius2 = splitted2[4].trim();
                                            String atom_color2 = splitted2[5].trim();
                                            String text_color2 = splitted2[6].trim();
                                            String atom_number2 = splitted2[7].trim();
                                            String col_at_border2 = splitted2[8].trim();
                                            String touch_time2 = splitted2[9].trim();

                                            if (lineNo2 >= lineNo1) {
                                                // investigate all distances
                                                double dist_scan1_scan2 = Math.sqrt(Math.pow((Double.valueOf(x_coordX) - Double.valueOf(x_coord2)), 2) + Math.pow((Double.valueOf(y_coordX) - Double.valueOf(y_coord2)), 2) + Math.pow((Double.valueOf(z_coordX) - Double.valueOf(z_coord2)), 2));
                                                double BondingDistance = BondScale * (Double.valueOf(radiusX) + Double.valueOf(radius2));
                                                if ((dist_scan1_scan2 < BondingDistance) && (dist_scan1_scan2 > 0)) {

                                                    double A2 = 0;
                                                    double B2 = 0;
                                                    double C2 = 1;
                                                    double D2 = 0;
                                                    double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                    double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                    double x_bond1 = 100 * x_proj1;
                                                    double y_bond1 = 100 * y_proj1;
                                                    double x_bond2 = 100 * x_proj2;
                                                    double y_bond2 = 100 * y_proj2;

//                                int bond_color = Color.GRAY;
                                                    int bond_color1 = Integer.valueOf(atom_colorX);
                                                    int bond_color2 = Integer.valueOf(atom_color2);

                                                    // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                    double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                    // write the file
                                                    FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                    OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                    outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "L" + "\n");
                                                    outputWriter_bonds.close();
                                                } else if ((dist_scan1_scan2 >= BondingDistance) && (atomX.equals("H") || atom2.equals("H"))) {
                                                    if (((atomX.equals("H") && atom2.equals("N")) || ((atomX.equals("N") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HN)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("O")) || ((atomX.equals("O") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HO)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("F")) || ((atomX.equals("F") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HF)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    } else if (((atomX.equals("H") && atom2.equals("Cl")) || ((atomX.equals("Cl") && atom2.equals("H")))) && (dist_scan1_scan2 <= h_bond_limit_HCl)) {
                                                        double A2 = 0;
                                                        double B2 = 0;
                                                        double C2 = 1;
                                                        double D2 = 0;
                                                        double x_proj1 = Double.valueOf(x_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj1 = Double.valueOf(y_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj1 = Double.valueOf(z_coordX) - A * (Double.valueOf(x_coordX) * A + Double.valueOf(y_coordX) * B + Double.valueOf(z_coordX) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double x_proj2 = Double.valueOf(x_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double y_proj2 = Double.valueOf(y_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));
                                                        double z_proj2 = Double.valueOf(z_coord2) - A * (Double.valueOf(x_coord2) * A + Double.valueOf(y_coord2) * B + Double.valueOf(z_coord2) * C) / (Math.pow(A, 2) + Math.pow(B, 2) + Math.pow(C, 2));

                                                        double x_bond1 = 100 * x_proj1;
                                                        double y_bond1 = 100 * y_proj1;
                                                        double x_bond2 = 100 * x_proj2;
                                                        double y_bond2 = 100 * y_proj2;

                                                        int bond_color1 = Integer.valueOf(atom_color);
                                                        int bond_color2 = Integer.valueOf(atom_color2);

                                                        // find out the "middle" z-coordinate for the bond, elucidate the case when all atoms are in plane (bonds are hidden)

                                                        double z_bond_average = 0.5 * (Double.valueOf(z_coordX) + Double.valueOf(z_coord2)) + ForegroundShiftBonds;

                                                        // write the file
                                                        FileOutputStream fileout_bonds = openFileOutput("Coordinates.tmp", MODE_APPEND);
                                                        OutputStreamWriter outputWriter_bonds = new OutputStreamWriter(fileout_bonds);
                                                        outputWriter_bonds.write(atomX + "\t" + atom2 + "\t" + x_bond1 + "\t" + y_bond1 + "\t" + x_bond2 + "\t" + y_bond2 + "\t" + z_bond_average + "\t" + bond_color1 + "\t" + bond_color2 + "\t" + "0" + "\t" + "H" + "\n");
                                                        outputWriter_bonds.close();
                                                    }
                                                }
                                            }
                                        }
                                        scan2.close();
                                    }
                                    scan.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp "+getFilesDir()+"/canvas3d/");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                // at the moment, the file Coordinates.tmp has to be sorted by the z_coord value:
                                try {
                                    String Z_sort = exec("sort -g -k7 "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                    FileOutputStream fileout_sort = openFileOutput("Coordinates.tmp_", MODE_PRIVATE);
                                    OutputStreamWriter outputWriter_sort = new OutputStreamWriter(fileout_sort);
                                    outputWriter_sort.write(Z_sort);
                                    outputWriter_sort.close();
                                    exec("mv "+getFilesDir()+"/Coordinates.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.tmp");
                                } catch (FileNotFoundException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                            } catch (Exception e) {
                                e.printStackTrace();
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                            Toast.makeText(getApplicationContext(), "File not read", Toast.LENGTH_SHORT).show();
                        }


                        molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                        onFinish();
//                    }
//                    public void onFinish() {
//                        progressDialog.dismiss();
//                    }
//                }.start();
            }



            perTable.setText(exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp"));
        }

        if (requestCode == CREATE_FILE && data != null) {
            Toast.makeText(getApplicationContext(), "File successfully created", Toast.LENGTH_SHORT).show();


            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O){
                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
                progressDialog.setTitle("Please wait...");
                progressDialog.setMessage("Exporting the structure...");
                progressDialog.setCancelable(false);
                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                progressDialog.show();

                new Thread() {
                    public void run() {
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        try {
                            Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));

                            // get knowledge on number of already existing lines in the file
                            InputStream inputStream = new FileInputStream(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                            LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                            try {
                                lineNumberReader.skip(Long.MAX_VALUE);
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
//                            int linesInFile = lineNumberReader.getLineNumber() + 1;  // because line numbers starts from 0
                            // but we add one more blank line
                            int linesInFile = lineNumberReader.getLineNumber();
                            String AtomNumber = String.valueOf(linesInFile);
                            FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp_", MODE_PRIVATE);
                            OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                            outputWriter0.write(AtomNumber);
                            outputWriter0.write("\n");
                            outputWriter0.write("\n");
                            outputWriter0.close();

                            while (scan3.hasNext()) {
                                String curLine = scan3.nextLine();
                                String[] splitted = curLine.split("\\s");
                                String atom = splitted[0].trim();
                                String x_coord = splitted[1].trim();
                                String y_coord = splitted[2].trim();
                                String z_coord = splitted[3].trim();
                                String radius = splitted[4].trim();
                                String atom_color = splitted[5].trim();
                                String text_color = splitted[6].trim();
                                String atom_number = splitted[7].trim();
                                String col_at_border = splitted[8].trim();
                                String touch_time = splitted[9].trim();

                                double x_double = Double.valueOf(x_coord);
                                double y_double = Double.valueOf(y_coord);
                                double z_double = Double.valueOf(z_coord);

                                String x_formatted = String.format("%.4f", x_double);
                                String y_formatted = String.format("%.4f", y_double);
                                String z_formatted = String.format("%.4f", z_double);

                                while (x_formatted.contains(",")){
                                    x_formatted = x_formatted.replace(",", ".");
                                }
                                while (y_formatted.contains(",")){
                                    y_formatted = y_formatted.replace(",", ".");
                                }
                                while (z_formatted.contains(",")){
                                    z_formatted = z_formatted.replace(",", ".");
                                }

                                // finish writing the file
                                FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp_", MODE_APPEND);
                                OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                outputWriter.close();
                            }
                            scan3.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        // this part should be inside of asyncTask - otherwise the exported XYZ would contain only as many lines, as the timing of the current thread would match the moment at which the file is created and exported (usually less lines than the entire file)
                        exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        try {
                            documentUri2 = data.getData();
                            ParcelFileDescriptor pfd = getContentResolver().openFileDescriptor(data.getData(), "w");
                            FileOutputStream fileOutputStream = new FileOutputStream(pfd.getFileDescriptor());
                            String fileContents = exec("cat "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
                            fileOutputStream.write((fileContents).getBytes());
                            fileOutputStream.close();
                            pfd.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                            Toast.makeText(getApplicationContext(), "File not written", Toast.LENGTH_SHORT).show();
                        }

                        molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
                        onFinish();
                    }
                    public void onFinish() {
                        progressDialog.dismiss();
                    }
                }.start();
            } else {
//                ProgressDialog progressDialog = new ProgressDialog(Canvas3d_main.this);
//                progressDialog.setTitle("Please wait...");
//                progressDialog.setMessage("Exporting the structure...");
//                progressDialog.setCancelable(false);
//                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel", new DialogInterface.OnClickListener() {
//                    @Override
//                    public void onClick(DialogInterface dialog, int which) {
//                        dialog.dismiss();
//                    }
//                });
//                progressDialog.show();
//
//                new Thread() {
//                    public void run() {
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        try {
                            Scanner scan3 = new Scanner(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));

                            // get knowledge on number of already existing lines in the file
                            InputStream inputStream = new FileInputStream(new File(getFilesDir()+"/canvas3d/Coordinates.x.tmp"));
                            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                            LineNumberReader lineNumberReader = new LineNumberReader(bufferedReader);
                            try {
                                lineNumberReader.skip(Long.MAX_VALUE);
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
//                            int linesInFile = lineNumberReader.getLineNumber() + 1;  // because line numbers starts from 0
                            // but we add one more blank line
                            int linesInFile = lineNumberReader.getLineNumber();
                            String AtomNumber = String.valueOf(linesInFile);
                            FileOutputStream fileout0 = openFileOutput("Coordinates.xyz.tmp_", MODE_PRIVATE);
                            OutputStreamWriter outputWriter0 = new OutputStreamWriter(fileout0);
                            outputWriter0.write(AtomNumber);
                            outputWriter0.write("\n");
                            outputWriter0.write("\n");
                            outputWriter0.close();

                            while (scan3.hasNext()) {
                                String curLine = scan3.nextLine();
                                String[] splitted = curLine.split("\\s");
                                String atom = splitted[0].trim();
                                String x_coord = splitted[1].trim();
                                String y_coord = splitted[2].trim();
                                String z_coord = splitted[3].trim();
                                String radius = splitted[4].trim();
                                String atom_color = splitted[5].trim();
                                String text_color = splitted[6].trim();
                                String atom_number = splitted[7].trim();
                                String col_at_border = splitted[8].trim();
                                String touch_time = splitted[9].trim();

                                double x_double = Double.valueOf(x_coord);
                                double y_double = Double.valueOf(y_coord);
                                double z_double = Double.valueOf(z_coord);

                                String x_formatted = String.format("%.4f", x_double);
                                String y_formatted = String.format("%.4f", y_double);
                                String z_formatted = String.format("%.4f", z_double);

                                while (x_formatted.contains(",")){
                                    x_formatted = x_formatted.replace(",", ".");
                                }
                                while (y_formatted.contains(",")){
                                    y_formatted = y_formatted.replace(",", ".");
                                }
                                while (z_formatted.contains(",")){
                                    z_formatted = z_formatted.replace(",", ".");
                                }

                                // finish writing the file
                                FileOutputStream fileout = openFileOutput("Coordinates.xyz.tmp_", MODE_APPEND);
                                OutputStreamWriter outputWriter = new OutputStreamWriter(fileout);
                                outputWriter.write(atom+" "+x_formatted+" "+y_formatted+" "+z_formatted+"\n");
                                outputWriter.close();
                            }
                            scan3.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        // this part should be inside of asyncTask - otherwise the exported XYZ would contain only as many lines, as the timing of the current thread would match the moment at which the file is created and exported (usually less lines than the entire file)
                        exec("mv "+getFilesDir()+"/Coordinates.xyz.tmp_ "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        try {
                            documentUri2 = data.getData();
                            ParcelFileDescriptor pfd = getContentResolver().openFileDescriptor(data.getData(), "w");
                            FileOutputStream fileOutputStream = new FileOutputStream(pfd.getFileDescriptor());
                            String fileContents = exec("cat "+getFilesDir()+"/canvas3d/Coordinates.xyz.tmp");
                            fileOutputStream.write((fileContents).getBytes());
                            fileOutputStream.close();
                            pfd.close();
                        } catch (Exception e) {
                            e.printStackTrace();
                            Toast.makeText(getApplicationContext(), "File not written", Toast.LENGTH_SHORT).show();
                        }

                        molCanvasView.setMoleculeRenderer(Canvas3d_CanvasView.TRUE);
//                        onFinish();
//                    }
//                    public void onFinish() {
//                        progressDialog.dismiss();
//                    }
//                }.start();
            }




        }
    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    protected void onResume() {
        super.onResume();
        perTable.setText(exec("cat "+getFilesDir()+"/canvas3d/Elmnt.tmp"));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
    }

    // Executes UNIX command.
    private String exec(String command) {
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream()));
            int read;
            char[] buffer = new char[65536];
            StringBuffer output = new StringBuffer();
            while ((read = reader.read(buffer)) > 0) {
                output.append(buffer, 0, read);
            }
            reader.close();
            process.waitFor();
            return output.toString();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    protected void copyFromAssetsToInternalStorage(String filename){
        AssetManager assetManager = getAssets();

        try {
            InputStream input = assetManager.open(filename);
            OutputStream output = openFileOutput(filename, Context.MODE_PRIVATE);

            copyFile(input, output);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int read;
        while((read = in.read(buffer)) != -1){
            out.write(buffer, 0, read);
        }
    }
}